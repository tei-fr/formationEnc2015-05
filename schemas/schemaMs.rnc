default namespace = "http://www.tei-c.org/ns/Examples"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ns1 = "http://www.tei-c.org/ns/1.0"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace s = "http://www.ascc.net/xml/schematron"
namespace sch = "http://purl.oclc.org/dsdl/schematron"
namespace xlink = "http://www.w3.org/1999/xlink"

# Schema generated from ODD source 2011-02-27T12:39:29Z. 
# Edition: 1.9.0. Last updated on February 21st 2011.
# Edition Location: http://www.tei-c.org/Vault/P5/1.9.0/
#

# 
# This template file is freely available and you are
#              hereby authorised to copy, modify, and redistribute it in
#              any way without further reference or permissions.
# When making such modifications, you are strongly
#              recommended to change the present text to include an
#              accurate statement of the licencing conditions applicable
#              to your modified text.
macro.paraContent =
  (text | model.gLike | model.phrase | model.inter | model.global)*
macro.limitedContent = (text | model.limitedPhrase | model.inter)*
macro.phraseSeq = (text | model.gLike | model.phrase | model.global)*
macro.phraseSeq.limited = (text | model.limitedPhrase | model.global)*
macro.specialPara =
  (text
   | model.gLike
   | model.phrase
   | model.inter
   | model.divPart
   | model.global)*
macro.xtext = (text | model.gLike)*
data.certainty = "high" | "medium" | "low" | "unknown"
data.probability = xsd:double { minInclusive = "0" maxInclusive = "1" }
data.numeric =
  xsd:double
  | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
  | xsd:decimal
data.count = xsd:nonNegativeInteger
data.temporal.w3c =
  xsd:date
  | xsd:gYear
  | xsd:gMonth
  | xsd:gDay
  | xsd:gYearMonth
  | xsd:gMonthDay
  | xsd:time
  | xsd:dateTime
data.truthValue = xsd:boolean
data.xTruthValue = xsd:boolean | "unknown" | "inapplicable"
data.language = xsd:language
data.sex = "0" | "1" | "2" | "9"
data.namespace = xsd:anyURI
data.outputMeasurement =
  xsd:token {
    pattern =
      "[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|gd|rem|vw|vh|vm)"
  }
data.pattern = xsd:token
data.point =
  xsd:token { pattern = "(\-?[0-9]+\.?[0-9]*,\-?[0-9]+\.?[0-9]*)" }
data.pointer = xsd:anyURI
data.version = xsd:token { pattern = "[\d]+(\.[\d]+){0,2}" }
data.key = xsd:string
data.word = xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
data.code = xsd:anyURI
data.name = xsd:Name
data.enumerated = data.name
data.temporal.iso =
  xsd:date
  | xsd:gYear
  | xsd:gMonth
  | xsd:gDay
  | xsd:gYearMonth
  | xsd:gMonthDay
  | xsd:time
  | xsd:dateTime
  | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
macro.anyXML =
  element * - (ns1:* | egXML) {
    attribute * { text }*,
    (text | macro.anyXML)*
  }
att.ascribed.attributes = att.ascribed.attribute.who
att.ascribed.attribute.who =
  
  ## indique la personne ou le groupe de personnes à qui
  ##         le contenu d'élément est attribué.
  attribute who {
    list { data.pointer, data.pointer* }
  }?
att.canonical.attributes =
  att.canonical.attribute.key, att.canonical.attribute.ref
att.canonical.attribute.key =
  
  ##  fournit un moyen, défini de façon externe,
  ##         d'identifier l'entité (ou les entités) nommé(es), en utilisant une valeur codée
  ##         d'un certain type.
  attribute key { data.key }?
att.canonical.attribute.ref =
  
  ##  (référence) fournit un moyen explicite de localiser une
  ##         définition complète de l'entité nommée au moyen d'un ou plusieurs URIs.
  attribute ref {
    list { data.pointer, data.pointer* }
  }?
att.ranging.attributes =
  att.ranging.attribute.atLeast,
  att.ranging.attribute.atMost,
  att.ranging.attribute.min,
  att.ranging.attribute.max
att.ranging.attribute.atLeast =
  
  ## donne une estimation de la valeur minimum pour la
  ##         mesure.
  attribute atLeast { data.numeric }?
att.ranging.attribute.atMost =
  
  ## donne une estimation de la valeur maximum pour la
  ##         mesure.
  attribute atMost { data.numeric }?
att.ranging.attribute.min =
  
  ## lorsque la mesure résume plus d'une observation,
  ##         fournit la valeur minimum observée.
  attribute min { data.numeric }?
att.ranging.attribute.max =
  
  ## lorsque la mesure résume plus d'une observation,
  ##         fournit la valeur maximum observée.
  attribute max { data.numeric }?
att.dimensions.attributes =
  att.ranging.attributes,
  att.dimensions.attribute.unit,
  att.dimensions.attribute.quantity,
  att.dimensions.attribute.extent,
  att.dimensions.attribute.precision,
  att.dimensions.attribute.scope
att.dimensions.attribute.unit =
  
  ## noms des unités utilisées pour la mesure.
  ## Les valeurs suggérées comprennent: 1] cm (centimètres) ; 2] mm (millimètres) ; 3] in (pouces) ; 4] lines; 5] chars(characters) 
  attribute unit {
    
    ##  (centimètres) 
    "cm"
    | 
      ##  (millimètres) 
      "mm"
    | 
      ##  (pouces) 
      "in"
    | 
      ## lignes de texte
      "lines"
    | 
      ## (characters) caractères du texte
      "chars"
    | xsd:Name
  }?
att.dimensions.attribute.quantity =
  
  ## spécifie la longueur dans les unités indiquées
  attribute quantity { data.numeric }?
att.dimensions.attribute.extent =
  
  ## indique la dimension de l'objet concerné en utilisant
  ##         un vocabulaire spécifique à un projet qui combine quantité et unités dans une chaîne de mots
  ##         unique
  attribute extent {
    list { data.word, data.word* }
  }?
att.dimensions.attribute.precision =
  
  ## caractérise la précision des valeurs spécifiées par les autres attributs.
  attribute precision { data.certainty }?
att.dimensions.attribute.scope =
  
  ## spécifie l'applicabilité de cette mesure, là où plus
  ##         d'un objet est mesuré.
  ## Exemple de valeurs possibles: 1] all; 2] most; 3] range
  attribute scope { data.enumerated }?
att.damaged.attributes =
  att.dimensions.attributes,
  att.damaged.attribute.hand,
  att.damaged.attribute.agent,
  att.damaged.attribute.degree,
  att.damaged.attribute.group
att.damaged.attribute.hand =
  
  ## dans le cas de dommages (effacement volontaire, etc.)
  ##         attribuable à une main identifiable, identifie cette main.
  attribute hand { data.pointer }?
att.damaged.attribute.agent =
  
  ##  caractérise la raison des dommages, lorsqu'elle peut
  ##         être identifiée
  ## Exemple de valeurs possibles: 1] rubbing; 2] mildew; 3] smoke
  attribute agent { data.enumerated }?
att.damaged.attribute.degree =
  
  ##  indique le degré (la gravité) du dommage subi, selon
  ##         une grille appropriée. L'attribut degree doit être utilisé dans le seul cas où le
  ##         texte peut être lu avec certitude ; le texte restitué en utilisant d'autres sources doit
  ##         être encodé au moyen de l'élément supplied.
  attribute degree { data.probability | data.certainty }?
att.damaged.attribute.group =
  
  ## permet d'assigner un numéro quelconque à chaque
  ##         fragment endommagé considéré comme faisant partie d'un ensemble résultant du même phénomène
  ##         physique
  attribute group { data.count }?
att.breaking.attributes = att.breaking.attribute.break
att.breaking.attribute.break =
  
  ## indicates whether or not the  element
  ##	bearing this attribute should be considered to mark the end of
  ##	an orthographic token in the same way as whitespace.
  attribute break { data.enumerated }?
att.datable.w3c.attributes =
  att.datable.w3c.attribute.period,
  att.datable.w3c.attribute.when,
  att.datable.w3c.attribute.notBefore,
  att.datable.w3c.attribute.notAfter,
  att.datable.w3c.attribute.from,
  att.datable.w3c.attribute.to
att.datable.w3c.attribute.period =
  
  ## fournit un pointeur vers un emplacement donné
  ## définissant une période de temps nommée pendant laquelle l'item datable
  ## s'inscrit.
  attribute period { data.pointer }?
att.datable.w3c.attribute.when =
  
  ## spécifie une date exacte pour un événement sous
  ##           une forme normalisée, par ex. aaaa-mm-jj.
  attribute when { data.temporal.w3c }?
att.datable.w3c.attribute.notBefore =
  
  ## spécifie la date la plus ancienne pour
  ##           l'événement sous une forme normalisée, par ex. aaaa-mm-jj
  attribute notBefore { data.temporal.w3c }?
att.datable.w3c.attribute.notAfter =
  
  ## spécifie la date la plus récente possible pour
  ##           l'événement sous une forme normalisée, par ex. aaaa-mm-jj
  attribute notAfter { data.temporal.w3c }?
att.datable.w3c.attribute.from =
  
  ## indique le point de départ d'une période sous une
  ##         forme normalisée, par ex. aaaa-mm-jj
  attribute from { data.temporal.w3c }?
att.datable.w3c.attribute.to =
  
  ## indique le terme de la période sous une forme
  ##         normalisée, par ex. aaaa-mm-jj
  attribute to { data.temporal.w3c }?
att.datable.attributes =
  att.datable.w3c.attributes, att.datable.iso.attributes
att.declarable.attributes = att.declarable.attribute.default
att.declarable.attribute.default =
  
  ## Indique si oui ou non cet élément est affecté par
  ##           défaut quand son élément parent a été sélectionné.
  [ a:defaultValue = "false" ]
  attribute default {
    
    ## cet élément est choisi si son parent
    ## est choisi
    "true"
    | 
      ## cet élément ne peut être sélectionné
      ## qu'explicitement, à moins qu'il ne soit le seul de ce type, auquel cas
      ## il est selectionné si son parent a été choisi
      "false"
  }?
att.declaring.attributes = att.declaring.attribute.decls
att.declaring.attribute.decls =
  
  ## identifie un ou plusieurséléments
  ##             déclarables dans l'en-tête TEI, qui sont destinés à s'appliquer à l'élément
  ##           portant cet attribut et à son contenu. 
  attribute decls {
    list { data.pointer, data.pointer* }
  }?
att.divLike.attributes =
  att.metrical.attributes,
  att.divLike.attribute.org,
  att.divLike.attribute.sample,
  att.divLike.attribute.part
att.divLike.attribute.org =
  
  ##  (organisation) précise l'organisation du contenu de la division 
  [ a:defaultValue = "uniform" ]
  attribute org {
    
    ## contenu composite : c'est-à-dire
    ## qu'aucune déclaration n'est faite quant à l'ordre dans lequel les
    ## composants de cette division doivent être traités ou bien quant à leurs
    ## corrélations
    "composite"
    | 
      ## contenu uniforme : c'est-à-dire que
      ## les composants de cet élément sont à considérer comme formant une unité
      ## logique et doivent être traités dans l'ordre séquentiel
      "uniform"
  }?
att.divLike.attribute.sample =
  
  ## indique si cette division est un échantillon de
  ##           la source originale et dans cas, de quelle partie.
  [ a:defaultValue = "complete" ]
  attribute sample {
    
    ##  par rapport à la source, lacune à la
    ## fin de la division
    "initial"
    | 
      ## par rapport à la source, lacune au
      ## début et à la fin de la division
      "medial"
    | 
      ## par rapport à la source, lacune au
      ## début de la division
      "final"
    | 
      ## par rapport à la source, position de
      ## l'échantillon inconnue
      "unknown"
    | 
      ## la division n'est pas un échantillon
      "complete"
  }?
att.divLike.attribute.part =
  
  ## précise si la division est vraiment fragmentée ou
  ##           non par quelques autres éléments structurels, par exemple une prise de parole qui est partagée
  ##           en au moins deux strophes de vers.
  [ a:defaultValue = "N" ]
  attribute part {
    
    ##  (oui) la division est incomplète à certains
    ## égards
    "Y"
    | 
      ##  (non) soit la division est complète, soit
      ## aucune déclaration n'est faite quant à son intégralité
      "N"
    | 
      ##  (initiale) partie initiale d'une division
      ## incomplète
      "I"
    | 
      ##  (médiane) partie médiane d'une division
      ## incomplète
      "M"
    | 
      ## (final) partie finale d'une division
      ## incomplète
      "F"
  }?
att.docStatus.attributes = att.docStatus.attribute.status
att.docStatus.attribute.status =
  
  ## describes the status of a document either currently or, when
  ## associated with a dated element, at the time indicated.
  ## Exemple de valeurs possibles: 1] approved; 2] candidate; 3] cleared; 4] deprecated; 5] draft; 6] embargoed; 7] expired; 8] frozen; 9] galley; 10] proposed; 11] published; 12] recommendation; 13] submitted; 14] unfinished; 15] withdrawn
  [ a:defaultValue = "draft" ] attribute status { data.enumerated }?
att.responsibility.attributes =
  att.responsibility.attribute.cert, att.responsibility.attribute.resp
att.responsibility.attribute.cert =
  
  ##  (certitude) donne le degré de certitude associée à l'intervention
  ##         ou à l'interprétation.
  attribute cert { data.certainty }?
att.responsibility.attribute.resp =
  
  ##  (responsable) indique l'agent responsable de l'intervention ou de
  ##         l'interprétation, par exemple un éditeur ou un transcripteur.
  attribute resp {
    list { data.pointer, data.pointer* }
  }?
att.editLike.attributes =
  att.dimensions.attributes,
  att.responsibility.attributes,
  att.editLike.attribute.evidence,
  att.editLike.attribute.source
att.editLike.attribute.evidence =
  
  ## indique la nature de la preuve attestant la fiabilité
  ##         ou la justesse de l'intervention ou de l'interprétation.
  ## Les valeurs suggérées comprennent: 1] internal; 2] external; 3] conjecture
  attribute evidence {
    list {
      (
       ## l'intervention est justifiée par une preuve
       ##             interne
       "internal"
       | 
         ## l'intervention est justifiée par une preuve
         ##             externe
         "external"
       | 
         ## l'intervention ou l'interprétation a été faite
         ##             par le rédacteur, le catalogueur, ou le chercheur sur la base de leur expertise.
         "conjecture"
       | xsd:Name),
      (
       ## l'intervention est justifiée par une preuve
       ##             interne
       "internal"
       | 
         ## l'intervention est justifiée par une preuve
         ##             externe
         "external"
       | 
         ## l'intervention ou l'interprétation a été faite
         ##             par le rédacteur, le catalogueur, ou le chercheur sur la base de leur expertise.
         "conjecture"
       | xsd:Name)*
    }
  }?
att.editLike.attribute.source =
  
  ##  contient une liste d'un ou plusieurs pointeurs
  ##         indiquant les sources qui appuient la lecture proposée
  attribute source {
    list { data.pointer, data.pointer* }
  }?
att.global.attributes =
  att.global.linking.attributes,
  att.global.analytic.attributes,
  att.global.facs.attributes,
  att.global.attribute.xmlid,
  att.global.attribute.n,
  att.global.attribute.xmllang,
  att.global.attribute.rend,
  att.global.attribute.rendition,
  att.global.attribute.xmlbase,
  att.global.attribute.xmlspace
att.global.attribute.xmlid =
  
  ##  (identifiant) fournit un identifiant unique pour l'élément qui
  ##         porte l'attribut
  attribute xml:id { xsd:ID }?
att.global.attribute.n =
  
  ##  (nombre) donne un nombre (ou une autre étiquette) pour un
  ##         élément, qui n'est pas nécessairement unique dans le document TEI.
  attribute n {
    list { data.word, data.word* }
  }?
att.global.attribute.xmllang =
  
  ##  (langue) indique la langue du contenu de l'élément en
  ##         utilisant les codes du RFC 3066
  ##          
  attribute xml:lang { data.language }?
att.global.attribute.rend =
  
  ##  (interprétation) indique comment l'élément en question a été rendu ou
  ##         présenté dans le texte source
  attribute rend {
    list { data.word, data.word* }
  }?
att.global.attribute.rendition =
  
  ## pointe vers une description du rendu ou de la
  ##         présentation utilisés pour cet élément dans le texte source
  attribute rendition {
    list { data.pointer, data.pointer* }
  }?
att.global.attribute.xmlbase =
  
  ## donne une référence URI de base au moyen de laquelle
  ##         les applications peuvent résoudre des références d'URI relatives en références d'URI
  ##         absolues
  attribute xml:base { data.pointer }?
att.global.attribute.xmlspace =
  
  ## signale que les applications doivent préserver
  ##           l'espace blanc
  attribute xml:space {
    
    ## the processor should treat white space according to the
    ##	default XML white space handling rules
    "default"
    | 
      ## the processor should preserve unchanged any and all
      ##	white space in the source
      "preserve"
  }?
att.handFeatures.attributes =
  att.handFeatures.attribute.scribe,
  att.handFeatures.attribute.scribeRef,
  att.handFeatures.attribute.script,
  att.handFeatures.attribute.scriptRef,
  att.handFeatures.attribute.medium,
  att.handFeatures.attribute.scope
att.handFeatures.attribute.scribe =
  
  ## donne un nom normalisé ou un autre
  ## identifiant pour le scribe reconnu comme responsable de cette main.
  attribute scribe { data.name }?
att.handFeatures.attribute.scribeRef =
  
  ## points to a full description of the scribe concerned, typically supplied by a person element
  ##       elsewhere in the description.
  attribute scribeRef {
    list { data.pointer, data.pointer* }
  }?
att.handFeatures.attribute.script =
  
  ## caractérise la calligraphie ou le style
  ##         d'écriture particuliers utilisés par cette main, par exemple écriture anglaise,
  ##         de chancellerie, italienne, etc.
  attribute script {
    list { data.name, data.name* }
  }?
att.handFeatures.attribute.scriptRef =
  
  ## points to a full description of the script or writing style used by
  ## this hand, typically supplied by a scriptNote element
  ##       elsewhere in the description.
  attribute scriptRef {
    list { data.pointer, data.pointer* }
  }?
att.handFeatures.attribute.medium =
  
  ## décrit la teinte ou le type d'encre, par
  ##         exemple brune, ou un autre outil d'écriture, par exemple un crayon.
  attribute medium { data.enumerated }?
att.handFeatures.attribute.scope =
  
  ## Spécifie la fréquence d'apparition de cette
  ## main dans le manuscrit.
  attribute scope {
    
    ## il n'y a que cette main dans le
    ## manuscrit.
    "sole"
    | 
      ## cette main est utilisée dans la
      ## majeure partie du manuscrit.
      "major"
    | 
      ## cette main est utilisée
      ## occasionnellement dans le manuscrit.
      "minor"
  }?
att.internetMedia.attributes = att.internetMedia.attribute.mimeType
att.internetMedia.attribute.mimeType =
  
  ##  (type de média MIME) spécifie le type MIME (multipurpose internet mail extension) applicable.
  attribute mimeType { data.word }?
att.interpLike.attributes =
  att.responsibility.attributes,
  att.interpLike.attribute.type,
  att.interpLike.attribute.inst
att.interpLike.attribute.type =
  
  ## indique quel genre de phénomène est noté dans le
  ##           passage.
  ## Exemple de valeurs possibles: 1] image; 2] character; 3] theme; 4] allusion
  attribute type { data.enumerated }?
att.interpLike.attribute.inst =
  
  ##  (cas) pointe vers les instances de l'analyse ou de
  ##           l'interprétation représentées par l'élément courant.
  attribute inst {
    list { data.pointer, data.pointer* }
  }?
att.measurement.attributes =
  att.measurement.attribute.unit,
  att.measurement.attribute.quantity,
  att.measurement.attribute.commodity
att.measurement.attribute.unit =
  
  ##  (unité) indique les unités de mesure utilisées ; il
  ##           s'agit en général du symbole normalisé pour les unités dont on a besoin.
  ## Les valeurs suggérées comprennent: 1] m (mètre) ; 2] kg (kilogramme) ; 3] s (seconde) ; 4] Hz(hertz) ; 5] Pa(pascal) ; 6] Ω(ohm) ; 7] L(litre) ; 8] t(tonne) ; 9] ha(hectare) ; 10] Å(ångström) ; 11] mL(millilitre) ; 12] cm (centimètre) ; 13] dB (décibel) ; 14] kbit(kilobit) ; 15] Kibit(kibibit) ; 16] kB (kilo-octet) ; 17] KiB (kibioctet) ; 18] MB (mégaoctet) ; 19] MiB (mébioctet) 
  attribute unit {
    
    ##  (mètre) unité SI (système international) de longueur
    "m"
    | 
      ##  (kilogramme) unité SI de masse
      "kg"
    | 
      ##  (seconde) unité SI de temps
      "s"
    | 
      ## (hertz) unité SI de fréquence
      "Hz"
    | 
      ## (pascal) unité SI de pression
      "Pa"
    | 
      ## (ohm) unité SI de résistance électrique
      "Ω"
    | 
      ## (litre) 1 dm³
      "L"
    | 
      ## (tonne) 10³ kg
      "t"
    | 
      ## (hectare) 1 hm²
      "ha"
    | 
      ## (ångström) 10⁻¹⁰ m
      "Å"
    | 
      ## (millilitre) 
      "mL"
    | 
      ##  (centimètre) 
      "cm"
    | 
      ##  (décibel) Voir remarques, ci-dessous.
      "dB"
    | 
      ## (kilobit) 10³ ou 1000 bits
      "kbit"
    | 
      ## (kibibit) 2¹⁰ ou 1024 bits
      "Kibit"
    | 
      ##  (kilo-octet) 10³ ou 1000 octets
      "kB"
    | 
      ##  (kibioctet) 2¹⁰ ou 1024 octets
      "KiB"
    | 
      ##  (mégaoctet) 10⁶ ou 1 000 000 octets
      "MB"
    | 
      ##  (mébioctet)  2²⁰ ou 1 048 576 octets
      "MiB"
    | xsd:Name
  }?
att.measurement.attribute.quantity =
  
  ##  (quantité) spécifie le nombre des unités indiquées que comprend la mesure.
  attribute quantity { data.numeric }?
att.measurement.attribute.commodity =
  
  ##  (article) indique ce qui est mesuré.
  attribute commodity {
    list { data.word, data.word* }
  }?
att.naming.attributes =
  att.canonical.attributes,
  att.naming.attribute.role,
  att.naming.attribute.nymRef
att.naming.attribute.role =
  
  ## may be used to specify further information about the entity referenced by
  ## this name, for example the occupation of a person, or the status of a place. 
  attribute role { data.enumerated }?
att.naming.attribute.nymRef =
  
  ##  (référence au nom canonique) indique comment localiser la forme canonique
  ##             (nym) des noms qui sont associés à l'objet nommé par l'élément qui le contient.
  attribute nymRef {
    list { data.pointer, data.pointer* }
  }?
att.placement.attributes = att.placement.attribute.place
att.placement.attribute.place =
  
  ## 
  ## Les valeurs suggérées comprennent: 1] below; 2] bottom; 3] margin; 4] top; 5] opposite; 6] overleaf; 7] above; 8] end; 9] inline; 10] inspace
  attribute place {
    list {
      (
       ## au-dessous de la ligne
       "below"
       | 
         ## dans la marge inférieure
         "bottom"
       | 
         ## dans la marge (gauche, droite ou les deux en même temps)
         "margin"
       | 
         ## dans la marge supérieure
         "top"
       | 
         ## sur la page opposée, c'est-à-dire en regard
         "opposite"
       | 
         ## de l'autre côté de la feuille
         "overleaf"
       | 
         ## au-dessus de la ligne
         "above"
       | 
         ## à la fin, par exemple d'un chapitre ou d'un volume
         "end"
       | 
         ## dans le corps du texte
         "inline"
       | 
         ## dans un espace prédéfini, par exemple à gauche d'un scripteur précédent
         "inspace"
       | xsd:Name),
      (
       ## au-dessous de la ligne
       "below"
       | 
         ## dans la marge inférieure
         "bottom"
       | 
         ## dans la marge (gauche, droite ou les deux en même temps)
         "margin"
       | 
         ## dans la marge supérieure
         "top"
       | 
         ## sur la page opposée, c'est-à-dire en regard
         "opposite"
       | 
         ## de l'autre côté de la feuille
         "overleaf"
       | 
         ## au-dessus de la ligne
         "above"
       | 
         ## à la fin, par exemple d'un chapitre ou d'un volume
         "end"
       | 
         ## dans le corps du texte
         "inline"
       | 
         ## dans un espace prédéfini, par exemple à gauche d'un scripteur précédent
         "inspace"
       | xsd:Name)*
    }
  }?
att.typed.attributes =
  att.typed.attribute.type, att.typed.attribute.subtype
att.typed.attribute.type =
  
  ## caractérise l'élément en utilisant n'importe quel système ou typologie de classification approprié.
  attribute type { data.enumerated }?
att.typed.attribute.subtype =
  
  ##  (sous-type) donne une sous-catégorisation de l'élément, si
  ##           c'est nécessaire.
  attribute subtype { data.enumerated }?
att.pointing.attributes =
  att.pointing.attribute.target, att.pointing.attribute.evaluate
att.pointing.attribute.target =
  
  ## précise la cible de la référence en donnant une ou
  ##         plusieurs références URI
  attribute target {
    list { data.pointer, data.pointer* }
  }?
att.pointing.attribute.evaluate =
  
  ##  (évalué) détermine le sens attendu, si la cible d'un pointeur est elle-même un pointeur.
  attribute evaluate {
    
    ## si l'élément pointé est lui-même un pointeur, alors on prendra la cible de ce pointeur, et ainsi de suite jusqu'à trouver un élément qui n'est pas un pointeur.
    "all"
    | 
      ## si l'élément pointé est lui-même un pointeur, alors sa cible (qui est ou non un pointeur) devient la cible retenue.
      "one"
    | 
      ## aucune évaluation ultérieure des cibles n'est menée au-delà de la recherche de l'élément désigné dans la cible du pointeur.
      "none"
  }?
att.pointing.group.attributes =
  att.pointing.attributes,
  att.typed.attributes,
  att.pointing.group.attribute.domains,
  att.pointing.group.attribute.targFunc
att.pointing.group.attribute.domains =
  
  ## spécifie, facultativement, les identifiants des éléments englobant tous les éléments indiqués par le contenu de cet élément.
  attribute domains {
    list { data.pointer, data.pointer, data.pointer* }
  }?
att.pointing.group.attribute.targFunc =
  
  ##  (fonction cible) décrit la fonction de chacune des valeurs de
  ##           l'attribut targets pour les balises incluses link, join, ou
  ##           alt.
  attribute targFunc {
    list { data.word, data.word, data.word* }
  }?
att.scoping.attributes =
  att.scoping.attribute.target, att.scoping.attribute.match
att.scoping.attribute.target =
  
  ## points at one or several  elements or  sets of elements by
  ##       means of one or more
  ##       data pointers, using the URI syntax.
  attribute target {
    list { data.pointer, data.pointer* }
  }?
att.scoping.attribute.match =
  
  ## supplies an arbitrary XPath expression identifying a set
  ##       of nodes, selected within the context identified by the
  ##       target attribute if this is supplied, or within the
  ##       context of the element bearing this attribute if it is not.
  ##
  attribute match { text }?
att.segLike.attributes =
  att.metrical.attributes,
  att.segLike.attribute.function,
  att.segLike.attribute.part
att.segLike.attribute.function =
  
  ##  (fonction) caractérise la fonction du segment.
  attribute function { data.enumerated }?
att.segLike.attribute.part =
  
  ##  (partie) spécifie si le segment est fragmenté ou non par un autre
  ##           élément structurel, par exemple une clausule qui est divisée en deux phrases ou plus.
  [ a:defaultValue = "N" ]
  attribute part {
    
    ##  (oui) le segment est incomplet à certains égards.
    "Y"
    | 
      ##  (non) soit le segment est complet, soit aucune déclaration n'est faite quant à son intégralité.
      "N"
    | 
      ##  (initial) partie initiale d'un segment incomplet
      "I"
    | 
      ##  (médian) partie médiane d'un segment incomplet
      "M"
    | 
      ##  (final) partie finale d'un segment incomplet
      "F"
  }?
att.sourced.attributes = att.sourced.attribute.ed
att.sourced.attribute.ed =
  
  ##  (édition) fournit un identifiant arbitraire pour l'édition source dans laquelle la caractéristique associée 
  ##         (par exemple, une page, une colonne ou un saut de ligne) apparaît à ce point du texte.
  attribute ed {
    list { data.code, data.code* }
  }?
att.spanning.attributes = att.spanning.attribute.spanTo
att.spanning.attribute.spanTo =
  
  ## indique la fin d'un passage introduit par l'élément portant cet attribut.
  attribute spanTo { data.pointer }?
att.tableDecoration.attributes =
  att.tableDecoration.attribute.role,
  att.tableDecoration.attribute.rows,
  att.tableDecoration.attribute.cols
att.tableDecoration.attribute.role =
  
  ##  (rôle) indique le type d'informations contenues dans cette cellule ou dans chaque cellule de cette ligne.
  ## Les valeurs suggérées comprennent: 1] label; 2] data
  [ a:defaultValue = "data" ]
  attribute role {
    
    ## uniquement des informations relatives au codage ou à la description
    "label"
    | 
      ## valeurs de données
      "data"
    | xsd:Name
  }?
att.tableDecoration.attribute.rows =
  
  ##  (lignes) indique le nombre de lignes occupées par la cellule ou la ligne en question.
  [ a:defaultValue = "1" ] attribute rows { data.count }?
att.tableDecoration.attribute.cols =
  
  ##  (colonnes) indique le nombre de colonnes occupées par cette cellule ou cette ligne.
  [ a:defaultValue = "1" ] attribute cols { data.count }?
att.transcriptional.attributes =
  att.editLike.attributes,
  att.transcriptional.attribute.hand,
  att.transcriptional.attribute.status,
  att.transcriptional.attribute.seq
att.transcriptional.attribute.hand =
  
  ## signale la main de celui qui est intervenu.
  attribute hand { data.pointer }?
att.transcriptional.attribute.status =
  
  ## indique la conséquence de l'intervention, par
  ## exemple dans le cas d'un effacement, une biffure, qui inclut trop ou pas assez de
  ## texte, ou dans le cas d'un ajout, une insertion, qui reproduit une portion du
  ## texte déjà présent.
  ## Exemple de valeurs possibles: 1] duplicate; 2] duplicate-partial; 3] excessStart; 4] excessEnd; 5] shortStart; 6] shortEnd; 7] partial; 8] unremarkable
  [ a:defaultValue = "unremarkable" ]
  attribute status { data.enumerated }?
att.transcriptional.attribute.seq =
  
  ##  (séquence) assigne un numéro séquentiel relatif à l'ordre
  ## dans lequel les traits encodés portant cet attribut sont supposés être apparus.
  attribute seq { data.count }?
att.translatable.attributes = att.translatable.attribute.version
att.translatable.attribute.version =
  
  ## spécifie le nom de la version ou le numéro de la
  ##           source dont la version traduite a été tirée.
  attribute version { data.word }?
model.nameLike.agent = name | orgName | persName
model.nameLike.agent_alternation = name | orgName | persName
model.nameLike.agent_sequence = name, orgName, persName
model.nameLike.agent_sequenceOptional = name?, orgName?, persName?
model.nameLike.agent_sequenceOptionalRepeatable =
  name*, orgName*, persName*
model.nameLike.agent_sequenceRepeatable = name+, orgName+, persName+
model.segLike = s | cl | phr | w | m | c | pc | seg
model.segLike_alternation = s | cl | phr | w | m | c | pc | seg
model.segLike_sequence = s, cl, phr, w, m, c, pc, seg
model.segLike_sequenceOptional = s?, cl?, phr?, w?, m?, c?, pc?, seg?
model.segLike_sequenceOptionalRepeatable =
  s*, cl*, phr*, w*, m*, c*, pc*, seg*
model.segLike_sequenceRepeatable = s+, cl+, phr+, w+, m+, c+, pc+, seg+
model.hiLike = hi
model.hiLike_alternation = hi
model.hiLike_sequence = hi
model.hiLike_sequenceOptional = hi?
model.hiLike_sequenceOptionalRepeatable = hi*
model.hiLike_sequenceRepeatable = hi+
model.emphLike =
  foreign
  | emph
  | distinct
  | mentioned
  | soCalled
  | gloss
  | term
  | title
model.emphLike_alternation =
  foreign
  | emph
  | distinct
  | mentioned
  | soCalled
  | gloss
  | term
  | title
model.emphLike_sequence =
  foreign, emph, distinct, mentioned, soCalled, gloss, term, title
model.emphLike_sequenceOptional =
  foreign?,
  emph?,
  distinct?,
  mentioned?,
  soCalled?,
  gloss?,
  term?,
  title?
model.emphLike_sequenceOptionalRepeatable =
  foreign*,
  emph*,
  distinct*,
  mentioned*,
  soCalled*,
  gloss*,
  term*,
  title*
model.emphLike_sequenceRepeatable =
  foreign+,
  emph+,
  distinct+,
  mentioned+,
  soCalled+,
  gloss+,
  term+,
  title+
model.highlighted = model.hiLike | model.emphLike
model.highlighted_alternation =
  model.hiLike_alternation | model.emphLike_alternation
model.highlighted_sequence =
  model.hiLike_sequence, model.emphLike_sequence
model.highlighted_sequenceOptional =
  model.hiLike_sequenceOptional?, model.emphLike_sequenceOptional?
model.highlighted_sequenceOptionalRepeatable =
  model.hiLike_sequenceOptionalRepeatable*,
  model.emphLike_sequenceOptionalRepeatable*
model.highlighted_sequenceRepeatable =
  model.hiLike_sequenceRepeatable+, model.emphLike_sequenceRepeatable+
model.dateLike = date | time
model.dateLike_alternation = date | time
model.dateLike_sequence = date, time
model.dateLike_sequenceOptional = date?, time?
model.dateLike_sequenceOptionalRepeatable = date*, time*
model.dateLike_sequenceRepeatable = date+, time+
model.dimLike = height | depth | width
model.measureLike =
  num | measure | measureGrp | dim | height | depth | width | geo
model.measureLike_alternation =
  num | measure | measureGrp | dim | height | depth | width | geo
model.measureLike_sequence =
  num, measure, measureGrp, dim, height, depth, width, geo
model.measureLike_sequenceOptional =
  num?, measure?, measureGrp?, dim?, height?, depth?, width?, geo?
model.measureLike_sequenceOptionalRepeatable =
  num*, measure*, measureGrp*, dim*, height*, depth*, width*, geo*
model.measureLike_sequenceRepeatable =
  num+, measure+, measureGrp+, dim+, height+, depth+, width+, geo+
model.egLike = notAllowed
model.egLike_alternation = notAllowed
model.egLike_sequence = empty
model.egLike_sequenceOptional = empty
model.egLike_sequenceOptionalRepeatable = empty
model.egLike_sequenceRepeatable = notAllowed
model.graphicLike = graphic | binaryObject | formula
model.graphicLike_alternation = graphic | binaryObject | formula
model.graphicLike_sequence = graphic, binaryObject, formula
model.graphicLike_sequenceOptional = graphic?, binaryObject?, formula?
model.graphicLike_sequenceOptionalRepeatable =
  graphic*, binaryObject*, formula*
model.graphicLike_sequenceRepeatable = graphic+, binaryObject+, formula+
model.offsetLike = offset | geogFeat
model.offsetLike_alternation = offset | geogFeat
model.offsetLike_sequence = offset, geogFeat
model.offsetLike_sequenceOptional = offset?, geogFeat?
model.offsetLike_sequenceOptionalRepeatable = offset*, geogFeat*
model.offsetLike_sequenceRepeatable = offset+, geogFeat+
model.pPart.msdesc =
  catchwords
  | dimensions
  | heraldry
  | locus
  | locusGrp
  | material
  | objectType
  | origDate
  | origPlace
  | secFol
  | signatures
  | stamp
  | watermark
  | handShift
model.pPart.msdesc_alternation =
  catchwords
  | dimensions
  | heraldry
  | locus
  | locusGrp
  | material
  | objectType
  | origDate
  | origPlace
  | secFol
  | signatures
  | stamp
  | watermark
  | handShift
model.pPart.msdesc_sequence =
  catchwords,
  dimensions,
  heraldry,
  locus,
  locusGrp,
  material,
  objectType,
  origDate,
  origPlace,
  secFol,
  signatures,
  stamp,
  watermark,
  handShift
model.pPart.msdesc_sequenceOptional =
  catchwords?,
  dimensions?,
  heraldry?,
  locus?,
  locusGrp?,
  material?,
  objectType?,
  origDate?,
  origPlace?,
  secFol?,
  signatures?,
  stamp?,
  watermark?,
  handShift?
model.pPart.msdesc_sequenceOptionalRepeatable =
  catchwords*,
  dimensions*,
  heraldry*,
  locus*,
  locusGrp*,
  material*,
  objectType*,
  origDate*,
  origPlace*,
  secFol*,
  signatures*,
  stamp*,
  watermark*,
  handShift*
model.pPart.msdesc_sequenceRepeatable =
  catchwords+,
  dimensions+,
  heraldry+,
  locus+,
  locusGrp+,
  material+,
  objectType+,
  origDate+,
  origPlace+,
  secFol+,
  signatures+,
  stamp+,
  watermark+,
  handShift+
model.pPart.editorial = choice | abbr | expan | ex | am | subst
model.pPart.editorial_alternation =
  choice | abbr | expan | ex | am | subst
model.pPart.editorial_sequence = choice, abbr, expan, ex, am, subst
model.pPart.editorial_sequenceOptional =
  choice?, abbr?, expan?, ex?, am?, subst?
model.pPart.editorial_sequenceOptionalRepeatable =
  choice*, abbr*, expan*, ex*, am*, subst*
model.pPart.editorial_sequenceRepeatable =
  choice+, abbr+, expan+, ex+, am+, subst+
model.pPart.transcriptional =
  sic
  | corr
  | reg
  | orig
  | add
  | del
  | unclear
  | app
  | damage
  | restore
  | supplied
  | surplus
model.pPart.transcriptional_alternation =
  sic
  | corr
  | reg
  | orig
  | add
  | del
  | unclear
  | app
  | damage
  | restore
  | supplied
  | surplus
model.pPart.transcriptional_sequence =
  sic,
  corr,
  reg,
  orig,
  add,
  del,
  unclear,
  app,
  damage,
  restore,
  supplied,
  surplus
model.pPart.transcriptional_sequenceOptional =
  sic?,
  corr?,
  reg?,
  orig?,
  add?,
  del?,
  unclear?,
  app?,
  damage?,
  restore?,
  supplied?,
  surplus?
model.pPart.transcriptional_sequenceOptionalRepeatable =
  sic*,
  corr*,
  reg*,
  orig*,
  add*,
  del*,
  unclear*,
  app*,
  damage*,
  restore*,
  supplied*,
  surplus*
model.pPart.transcriptional_sequenceRepeatable =
  sic+,
  corr+,
  reg+,
  orig+,
  add+,
  del+,
  unclear+,
  app+,
  damage+,
  restore+,
  supplied+,
  surplus+
model.pPart.edit = model.pPart.editorial | model.pPart.transcriptional
model.pPart.edit_alternation =
  model.pPart.editorial_alternation
  | model.pPart.transcriptional_alternation
model.pPart.edit_sequence =
  model.pPart.editorial_sequence, model.pPart.transcriptional_sequence
model.pPart.edit_sequenceOptional =
  model.pPart.editorial_sequenceOptional?,
  model.pPart.transcriptional_sequenceOptional?
model.pPart.edit_sequenceOptionalRepeatable =
  model.pPart.editorial_sequenceOptionalRepeatable*,
  model.pPart.transcriptional_sequenceOptionalRepeatable*
model.pPart.edit_sequenceRepeatable =
  model.pPart.editorial_sequenceRepeatable+,
  model.pPart.transcriptional_sequenceRepeatable+
model.ptrLike = ptr | ref
model.ptrLike_alternation = ptr | ref
model.ptrLike_sequence = ptr, ref
model.ptrLike_sequenceOptional = ptr?, ref?
model.ptrLike_sequenceOptionalRepeatable = ptr*, ref*
model.ptrLike_sequenceRepeatable = ptr+, ref+
model.lPart = caesura | rhyme
model.lPart_alternation = caesura | rhyme
model.lPart_sequence = caesura, rhyme
model.lPart_sequenceOptional = caesura?, rhyme?
model.lPart_sequenceOptionalRepeatable = caesura*, rhyme*
model.lPart_sequenceRepeatable = caesura+, rhyme+
model.global.meta =
  index
  | span
  | spanGrp
  | interp
  | interpGrp
  | precision
  | certainty
  | respons
  | link
  | linkGrp
  | timeline
  | join
  | joinGrp
  | alt
  | altGrp
model.global.meta_alternation =
  index
  | span
  | spanGrp
  | interp
  | interpGrp
  | precision
  | certainty
  | respons
  | link
  | linkGrp
  | timeline
  | join
  | joinGrp
  | alt
  | altGrp
model.global.meta_sequence =
  index,
  span,
  spanGrp,
  interp,
  interpGrp,
  precision,
  certainty,
  respons,
  link,
  linkGrp,
  timeline,
  join,
  joinGrp,
  alt,
  altGrp
model.global.meta_sequenceOptional =
  index?,
  span?,
  spanGrp?,
  interp?,
  interpGrp?,
  precision?,
  certainty?,
  respons?,
  link?,
  linkGrp?,
  timeline?,
  join?,
  joinGrp?,
  alt?,
  altGrp?
model.global.meta_sequenceOptionalRepeatable =
  index*,
  span*,
  spanGrp*,
  interp*,
  interpGrp*,
  precision*,
  certainty*,
  respons*,
  link*,
  linkGrp*,
  timeline*,
  join*,
  joinGrp*,
  alt*,
  altGrp*
model.global.meta_sequenceRepeatable =
  index+,
  span+,
  spanGrp+,
  interp+,
  interpGrp+,
  precision+,
  certainty+,
  respons+,
  link+,
  linkGrp+,
  timeline+,
  join+,
  joinGrp+,
  alt+,
  altGrp+
model.milestoneLike = milestone | pb | lb | cb | anchor | fw | gb
model.milestoneLike_alternation =
  milestone | pb | lb | cb | anchor | fw | gb
model.milestoneLike_sequence = milestone, pb, lb, cb, anchor, fw, gb
model.milestoneLike_sequenceOptional =
  milestone?, pb?, lb?, cb?, anchor?, fw?, gb?
model.milestoneLike_sequenceOptionalRepeatable =
  milestone*, pb*, lb*, cb*, anchor*, fw*, gb*
model.milestoneLike_sequenceRepeatable =
  milestone+, pb+, lb+, cb+, anchor+, fw+, gb+
model.gLike = g
model.biblLike = bibl | biblStruct | biblFull | msDesc
model.biblLike_alternation = bibl | biblStruct | biblFull | msDesc
model.biblLike_sequence = bibl, biblStruct, biblFull, msDesc
model.biblLike_sequenceOptional = bibl?, biblStruct?, biblFull?, msDesc?
model.biblLike_sequenceOptionalRepeatable =
  bibl*, biblStruct*, biblFull*, msDesc*
model.biblLike_sequenceRepeatable =
  bibl+, biblStruct+, biblFull+, msDesc+
model.headLike = head
model.headLike_alternation = head
model.headLike_sequence = head
model.headLike_sequenceOptional = head?
model.headLike_sequenceOptionalRepeatable = head*
model.headLike_sequenceRepeatable = head+
model.labelLike = desc | label
model.labelLike_alternation = desc | label
model.labelLike_sequence = desc, label
model.labelLike_sequenceOptional = desc?, label?
model.labelLike_sequenceOptionalRepeatable = desc*, label*
model.labelLike_sequenceRepeatable = desc+, label+
model.listLike =
  \list
  | listBibl
  | listOrg
  | listEvent
  | listPerson
  | listPlace
  | listNym
  | listWit
model.listLike_alternation =
  \list
  | listBibl
  | listOrg
  | listEvent
  | listPerson
  | listPlace
  | listNym
  | listWit
model.listLike_sequence =
  \list,
  listBibl,
  listOrg,
  listEvent,
  listPerson,
  listPlace,
  listNym,
  listWit
model.listLike_sequenceOptional =
  \list?,
  listBibl?,
  listOrg?,
  listEvent?,
  listPerson?,
  listPlace?,
  listNym?,
  listWit?
model.listLike_sequenceOptionalRepeatable =
  \list*,
  listBibl*,
  listOrg*,
  listEvent*,
  listPerson*,
  listPlace*,
  listNym*,
  listWit*
model.listLike_sequenceRepeatable =
  \list+,
  listBibl+,
  listOrg+,
  listEvent+,
  listPerson+,
  listPlace+,
  listNym+,
  listWit+
model.noteLike = note | witDetail
model.noteLike_alternation = note | witDetail
model.noteLike_sequence = note, witDetail
model.noteLike_sequenceOptional = note?, witDetail?
model.noteLike_sequenceOptionalRepeatable = note*, witDetail*
model.noteLike_sequenceRepeatable = note+, witDetail+
model.lLike = l
model.lLike_alternation = l
model.lLike_sequence = l
model.lLike_sequenceOptional = l?
model.lLike_sequenceOptionalRepeatable = l*
model.lLike_sequenceRepeatable = l+
model.pLike = p | ab
model.pLike_alternation = p | ab
model.pLike_sequence = p, ab
model.pLike_sequenceOptional = p?, ab?
model.pLike_sequenceOptionalRepeatable = p*, ab*
model.pLike_sequenceRepeatable = p+, ab+
model.stageLike = stage
model.stageLike_alternation = stage
model.stageLike_sequence = stage
model.stageLike_sequenceOptional = stage?
model.stageLike_sequenceOptionalRepeatable = stage*
model.stageLike_sequenceRepeatable = stage+
model.entryPart = notAllowed
model.global.edit = gap | addSpan | damageSpan | delSpan | space
model.global.edit_alternation =
  gap | addSpan | damageSpan | delSpan | space
model.global.edit_sequence = gap, addSpan, damageSpan, delSpan, space
model.global.edit_sequenceOptional =
  gap?, addSpan?, damageSpan?, delSpan?, space?
model.global.edit_sequenceOptionalRepeatable =
  gap*, addSpan*, damageSpan*, delSpan*, space*
model.global.edit_sequenceRepeatable =
  gap+, addSpan+, damageSpan+, delSpan+, space+
model.divPart = model.lLike | model.pLike | lg | sp | floatingText
model.divPart_alternation =
  model.lLike_alternation
  | model.pLike_alternation
  | lg
  | sp
  | floatingText
model.divPart_sequence =
  model.lLike_sequence, model.pLike_sequence, lg, sp, floatingText
model.divPart_sequenceOptional =
  model.lLike_sequenceOptional?,
  model.pLike_sequenceOptional?,
  lg?,
  sp?,
  floatingText?
model.divPart_sequenceOptionalRepeatable =
  model.lLike_sequenceOptionalRepeatable*,
  model.pLike_sequenceOptionalRepeatable*,
  lg*,
  sp*,
  floatingText*
model.divPart_sequenceRepeatable =
  model.lLike_sequenceRepeatable+,
  model.pLike_sequenceRepeatable+,
  lg+,
  sp+,
  floatingText+
model.persTraitLike =
  age | faith | langKnowledge | nationality | sex | socecStatus | trait
model.persTraitLike_alternation =
  age | faith | langKnowledge | nationality | sex | socecStatus | trait
model.persTraitLike_sequence =
  age, faith, langKnowledge, nationality, sex, socecStatus, trait
model.persTraitLike_sequenceOptional =
  age?, faith?, langKnowledge?, nationality?, sex?, socecStatus?, trait?
model.persTraitLike_sequenceOptionalRepeatable =
  age*, faith*, langKnowledge*, nationality*, sex*, socecStatus*, trait*
model.persTraitLike_sequenceRepeatable =
  age+, faith+, langKnowledge+, nationality+, sex+, socecStatus+, trait+
model.persStateLike =
  persName
  | affiliation
  | education
  | floruit
  | occupation
  | residence
  | state
model.persStateLike_alternation =
  persName
  | affiliation
  | education
  | floruit
  | occupation
  | residence
  | state
model.persStateLike_sequence =
  persName,
  affiliation,
  education,
  floruit,
  occupation,
  residence,
  state
model.persStateLike_sequenceOptional =
  persName?,
  affiliation?,
  education?,
  floruit?,
  occupation?,
  residence?,
  state?
model.persStateLike_sequenceOptionalRepeatable =
  persName*,
  affiliation*,
  education*,
  floruit*,
  occupation*,
  residence*,
  state*
model.persStateLike_sequenceRepeatable =
  persName+,
  affiliation+,
  education+,
  floruit+,
  occupation+,
  residence+,
  state+
model.persEventLike = birth | death | event
model.persEventLike_alternation = birth | death | event
model.persEventLike_sequence = birth, death, event
model.persEventLike_sequenceOptional = birth?, death?, event?
model.persEventLike_sequenceOptionalRepeatable = birth*, death*, event*
model.persEventLike_sequenceRepeatable = birth+, death+, event+
model.personLike = org | person | personGrp
model.personPart =
  model.persTraitLike | model.persStateLike | model.persEventLike | bibl
model.placeTraitLike = climate | location | population | terrain | trait
model.placeNamePart =
  placeName | bloc | country | region | district | settlement | geogName
model.placeNamePart_alternation =
  placeName | bloc | country | region | district | settlement | geogName
model.placeNamePart_sequence =
  placeName, bloc, country, region, district, settlement, geogName
model.placeNamePart_sequenceOptional =
  placeName?,
  bloc?,
  country?,
  region?,
  district?,
  settlement?,
  geogName?
model.placeNamePart_sequenceOptionalRepeatable =
  placeName*,
  bloc*,
  country*,
  region*,
  district*,
  settlement*,
  geogName*
model.placeNamePart_sequenceRepeatable =
  placeName+,
  bloc+,
  country+,
  region+,
  district+,
  settlement+,
  geogName+
model.placeStateLike = model.placeNamePart | state
model.placeStateLike_alternation =
  model.placeNamePart_alternation | state
model.placeStateLike_sequence = model.placeNamePart_sequence, state
model.placeStateLike_sequenceOptional =
  model.placeNamePart_sequenceOptional?, state?
model.placeStateLike_sequenceOptionalRepeatable =
  model.placeNamePart_sequenceOptionalRepeatable*, state*
model.placeStateLike_sequenceRepeatable =
  model.placeNamePart_sequenceRepeatable+, state+
model.placeEventLike = event
model.publicationStmtPart =
  address
  | date
  | publisher
  | pubPlace
  | distributor
  | authority
  | idno
  | availability
model.glossLike = desc | gloss | precision | certainty | respons
model.quoteLike = quote | cit
model.quoteLike_alternation = quote | cit
model.quoteLike_sequence = quote, cit
model.quoteLike_sequenceOptional = quote?, cit?
model.quoteLike_sequenceOptionalRepeatable = quote*, cit*
model.quoteLike_sequenceRepeatable = quote+, cit+
model.qLike = model.quoteLike | said | q
model.qLike_alternation = model.quoteLike_alternation | said | q
model.qLike_sequence = model.quoteLike_sequence, said, q
model.qLike_sequenceOptional =
  model.quoteLike_sequenceOptional?, said?, q?
model.qLike_sequenceOptionalRepeatable =
  model.quoteLike_sequenceOptionalRepeatable*, said*, q*
model.qLike_sequenceRepeatable =
  model.quoteLike_sequenceRepeatable+, said+, q+
model.respLike =
  author | editor | respStmt | meeting | sponsor | funder | principal
model.respLike_alternation =
  author | editor | respStmt | meeting | sponsor | funder | principal
model.respLike_sequence =
  author, editor, respStmt, meeting, sponsor, funder, principal
model.respLike_sequenceOptional =
  author?, editor?, respStmt?, meeting?, sponsor?, funder?, principal?
model.respLike_sequenceOptionalRepeatable =
  author*, editor*, respStmt*, meeting*, sponsor*, funder*, principal*
model.respLike_sequenceRepeatable =
  author+, editor+, respStmt+, meeting+, sponsor+, funder+, principal+
model.divWrapper =
  meeting
  | byline
  | dateline
  | argument
  | epigraph
  | salute
  | docAuthor
  | docDate
model.divWrapper_alternation =
  meeting
  | byline
  | dateline
  | argument
  | epigraph
  | salute
  | docAuthor
  | docDate
model.divWrapper_sequence =
  meeting,
  byline,
  dateline,
  argument,
  epigraph,
  salute,
  docAuthor,
  docDate
model.divWrapper_sequenceOptional =
  meeting?,
  byline?,
  dateline?,
  argument?,
  epigraph?,
  salute?,
  docAuthor?,
  docDate?
model.divWrapper_sequenceOptionalRepeatable =
  meeting*,
  byline*,
  dateline*,
  argument*,
  epigraph*,
  salute*,
  docAuthor*,
  docDate*
model.divWrapper_sequenceRepeatable =
  meeting+,
  byline+,
  dateline+,
  argument+,
  epigraph+,
  salute+,
  docAuthor+,
  docDate+
model.divTopPart = model.headLike | opener
model.divTopPart_alternation = model.headLike_alternation | opener
model.divTopPart_sequence = model.headLike_sequence, opener
model.divTopPart_sequenceOptional =
  model.headLike_sequenceOptional?, opener?
model.divTopPart_sequenceOptionalRepeatable =
  model.headLike_sequenceOptionalRepeatable*, opener*
model.divTopPart_sequenceRepeatable =
  model.headLike_sequenceRepeatable+, opener+
model.divTop = model.divWrapper | model.divTopPart
model.pLike.front =
  head
  | byline
  | argument
  | epigraph
  | docTitle
  | titlePart
  | docAuthor
  | docEdition
  | docImprint
  | docDate
model.divBottomPart = trailer | closer | signed | postscript
model.divBottomPart_alternation = trailer | closer | signed | postscript
model.divBottomPart_sequence = trailer, closer, signed, postscript
model.divBottomPart_sequenceOptional =
  trailer?, closer?, signed?, postscript?
model.divBottomPart_sequenceOptionalRepeatable =
  trailer*, closer*, signed*, postscript*
model.divBottomPart_sequenceRepeatable =
  trailer+, closer+, signed+, postscript+
model.divBottom = model.divWrapper | model.divBottomPart
model.titlepagePart =
  graphic
  | binaryObject
  | byline
  | argument
  | epigraph
  | docTitle
  | titlePart
  | docAuthor
  | imprimatur
  | docEdition
  | docImprint
  | docDate
model.msQuoteLike =
  title | colophon | explicit | finalRubric | incipit | rubric
model.msQuoteLike_alternation =
  title | colophon | explicit | finalRubric | incipit | rubric
model.msQuoteLike_sequence =
  title, colophon, explicit, finalRubric, incipit, rubric
model.msQuoteLike_sequenceOptional =
  title?, colophon?, explicit?, finalRubric?, incipit?, rubric?
model.msQuoteLike_sequenceOptionalRepeatable =
  title*, colophon*, explicit*, finalRubric*, incipit*, rubric*
model.msQuoteLike_sequenceRepeatable =
  title+, colophon+, explicit+, finalRubric+, incipit+, rubric+
model.msItemPart =
  model.quoteLike
  | model.respLike
  | model.msQuoteLike
  | bibl
  | listBibl
  | filiation
  | msItem
  | msItemStruct
  | textLang
  | decoNote
model.choicePart =
  sic | corr | reg | orig | unclear | abbr | expan | seg | ex | am
model.imprintPart = publisher | biblScope | pubPlace | distributor
model.imprintPart_alternation =
  publisher | biblScope | pubPlace | distributor
model.imprintPart_sequence = publisher, biblScope, pubPlace, distributor
model.imprintPart_sequenceOptional =
  publisher?, biblScope?, pubPlace?, distributor?
model.imprintPart_sequenceOptionalRepeatable =
  publisher*, biblScope*, pubPlace*, distributor*
model.imprintPart_sequenceRepeatable =
  publisher+, biblScope+, pubPlace+, distributor+
model.catDescPart = notAllowed
model.physDescPart_sequenceOptional =
  objectDesc?,
  handDesc?,
  typeDesc?,
  scriptDesc?,
  musicNotation?,
  decoDesc?,
  additions?,
  bindingDesc?,
  sealDesc?,
  accMat?
model.addressLike = email | address | affiliation
model.addressLike_alternation = email | address | affiliation
model.addressLike_sequence = email, address, affiliation
model.addressLike_sequenceOptional = email?, address?, affiliation?
model.addressLike_sequenceOptionalRepeatable =
  email*, address*, affiliation*
model.addressLike_sequenceRepeatable = email+, address+, affiliation+
model.nameLike =
  model.nameLike.agent
  | model.offsetLike
  | model.placeStateLike
  | rs
  | idno
  | model.persNamePart
model.nameLike_alternation =
  model.nameLike.agent_alternation
  | model.offsetLike_alternation
  | model.placeStateLike_alternation
  | rs
  | idno
  | model.persNamePart_alternation
model.nameLike_sequence =
  model.nameLike.agent_sequence,
  model.offsetLike_sequence,
  model.placeStateLike_sequence,
  rs,
  idno,
  model.persNamePart_sequence
model.nameLike_sequenceOptional =
  model.nameLike.agent_sequenceOptional?,
  model.offsetLike_sequenceOptional?,
  model.placeStateLike_sequenceOptional?,
  rs?,
  idno?,
  model.persNamePart_sequenceOptional?
model.nameLike_sequenceOptionalRepeatable =
  model.nameLike.agent_sequenceOptionalRepeatable*,
  model.offsetLike_sequenceOptionalRepeatable*,
  model.placeStateLike_sequenceOptionalRepeatable*,
  rs*,
  idno*,
  model.persNamePart_sequenceOptionalRepeatable*
model.nameLike_sequenceRepeatable =
  model.nameLike.agent_sequenceRepeatable+,
  model.offsetLike_sequenceRepeatable+,
  model.placeStateLike_sequenceRepeatable+,
  rs+,
  idno+,
  model.persNamePart_sequenceRepeatable+
model.global =
  model.global.meta
  | model.milestoneLike
  | model.noteLike
  | model.global.edit
  | figure
model.biblPart =
  model.respLike
  | model.imprintPart
  | series
  | relatedItem
  | edition
  | extent
  | msIdentifier
model.frontPart = divGen | titlePage
model.addrPart = model.nameLike | addrLine | street | postCode | postBox
model.pPart.data =
  model.dateLike
  | model.measureLike
  | model.addressLike
  | model.nameLike
model.pPart.data_alternation =
  model.dateLike_alternation
  | model.measureLike_alternation
  | model.addressLike_alternation
  | model.nameLike_alternation
model.pPart.data_sequence =
  model.dateLike_sequence,
  model.measureLike_sequence,
  model.addressLike_sequence,
  model.nameLike_sequence
model.pPart.data_sequenceOptional =
  model.dateLike_sequenceOptional?,
  model.measureLike_sequenceOptional?,
  model.addressLike_sequenceOptional?,
  model.nameLike_sequenceOptional?
model.pPart.data_sequenceOptionalRepeatable =
  model.dateLike_sequenceOptionalRepeatable*,
  model.measureLike_sequenceOptionalRepeatable*,
  model.addressLike_sequenceOptionalRepeatable*,
  model.nameLike_sequenceOptionalRepeatable*
model.pPart.data_sequenceRepeatable =
  model.dateLike_sequenceRepeatable+,
  model.measureLike_sequenceRepeatable+,
  model.addressLike_sequenceRepeatable+,
  model.nameLike_sequenceRepeatable+
model.inter =
  model.egLike
  | model.biblLike
  | model.labelLike
  | model.listLike
  | model.stageLike
  | model.qLike
  | table
model.inter_alternation =
  model.egLike_alternation
  | model.biblLike_alternation
  | model.labelLike_alternation
  | model.listLike_alternation
  | model.stageLike_alternation
  | model.qLike_alternation
  | table
model.inter_sequence =
  model.egLike_sequence,
  model.biblLike_sequence,
  model.labelLike_sequence,
  model.listLike_sequence,
  model.stageLike_sequence,
  model.qLike_sequence,
  table
model.inter_sequenceOptional =
  model.egLike_sequenceOptional?,
  model.biblLike_sequenceOptional?,
  model.labelLike_sequenceOptional?,
  model.listLike_sequenceOptional?,
  model.stageLike_sequenceOptional?,
  model.qLike_sequenceOptional?,
  table?
model.inter_sequenceOptionalRepeatable =
  model.egLike_sequenceOptionalRepeatable*,
  model.biblLike_sequenceOptionalRepeatable*,
  model.labelLike_sequenceOptionalRepeatable*,
  model.listLike_sequenceOptionalRepeatable*,
  model.stageLike_sequenceOptionalRepeatable*,
  model.qLike_sequenceOptionalRepeatable*,
  table*
model.inter_sequenceRepeatable =
  model.egLike_sequenceRepeatable+,
  model.biblLike_sequenceRepeatable+,
  model.labelLike_sequenceRepeatable+,
  model.listLike_sequenceRepeatable+,
  model.stageLike_sequenceRepeatable+,
  model.qLike_sequenceRepeatable+,
  table+
model.common = model.divPart | model.inter
model.phrase =
  model.segLike
  | model.highlighted
  | model.graphicLike
  | model.pPart.msdesc
  | model.pPart.edit
  | model.ptrLike
  | model.lPart
  | model.pPart.data
model.limitedPhrase =
  model.emphLike
  | model.pPart.msdesc
  | model.pPart.editorial
  | model.ptrLike
  | model.pPart.data
model.divLike = \div
model.divGenLike = divGen
model.div1Like = div1
model.div2Like = div2
model.div3Like = div3
model.div4Like = div4
model.div5Like = div5
model.div6Like = div6
model.div7Like = div7
model.applicationLike = application
model.teiHeaderPart = encodingDesc | profileDesc
model.sourceDescPart = notAllowed
model.encodingDescPart =
  charDecl
  | projectDesc
  | samplingDecl
  | editorialDecl
  | tagsDecl
  | refsDecl
  | classDecl
  | appInfo
  | geoDecl
  | variantEncoding
  | metDecl
model.editorialDeclPart =
  correction
  | normalization
  | quotation
  | hyphenation
  | segmentation
  | stdVals
  | interpretation
model.profileDescPart = creation | langUsage | textClass | handNotes
model.resourceLike = facsimile
att.personal.attributes =
  att.naming.attributes,
  att.personal.attribute.full,
  att.personal.attribute.sort
att.personal.attribute.full =
  
  ## indique si la composante du nom est donnée en intégralité, sous forme d'abréviation ou simplement d'initiale.
  [ a:defaultValue = "yes" ]
  attribute full {
    
    ##  (complet) la composante du nom est orthographiée en intégralité.
    "yes"
    | 
      ##  (abrégé) la composante du nom est donnée sous forme abrégée.
      "abb"
    | 
      ##  (initiale) la composante du nom n'est indiquée que par sa lettre initiale.
      "init"
  }?
att.personal.attribute.sort =
  
  ##  (ordre) précise dans quel ordre est placé la composante par rapport aux autres dans le nom d'une personne.
  attribute sort { data.count }?
model.placeLike = place
p =
  
  ##  (paragraphe) marque les paragraphes dans un texte en prose.
  element ns1:p {
    macro.paraContent,
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
foreign =
  
  ##  (étranger) reconnaît un mot ou une expression comme
  ##                 appartenant à une langue différente de celle du contexte. 
  element ns1:foreign { macro.phraseSeq, att.global.attributes, empty }
emph =
  
  ##  (mis en valeur) marque des mots ou des expressions qui sont
  ##         accentuées ou mises en valeur pour un motif  linguistique ou rhétorique.
  element ns1:emph { macro.paraContent, att.global.attributes, empty }
hi =
  
  ##  (mis en évidence) distingue un mot ou une expression comme
  ##         graphiquement distincte du texte environnant, sans en donner la raison. 
  element ns1:hi { macro.paraContent, att.global.attributes, empty }
distinct =
  
  ## identifie tout mot ou toute expression en la  considérérant comme
  ##         linguistiquement spécifique, par exemple comme étant archaïque, technique, dialectale,
  ##         inusitée, ou comme appartenant à une langue spécifique.
  element ns1:distinct {
    macro.phraseSeq,
    att.global.attributes,
    
    ## précise la variété de langue ou le registre de langue
    ##                 auquels appartiennent le mot ou l'expression.
    attribute type { data.enumerated }?,
    
    ## précise comment l'expression est diachroniquement distincte.
    attribute time { data.code }?,
    
    ## précise comment l'expression se caractérise de
    ##                 façon diatopique.
    attribute space { data.code }?,
    
    ## précise comment l'expression se caractérise de
    ##                 façon diastatique.
    attribute social { data.code }?,
    empty
  }
said =
  
  ##  (Parole ou pensée.) indique que les passages sont pensés ou qu'ils sont
  ##     prononcés à haute voix, que cela soit indiqué explicitement ou non dans la source , que ces
  ##     passages soient directement ou indirectement rapportés par des personnages réels ou fictifs.
  element ns1:said {
    macro.specialPara,
    att.global.attributes,
    att.ascribed.attributes,
    
    ## peut être utilisé pour indiquer si l'on estime que
    ##         l'objet cité est dit oralement ou par signes.
    [ a:defaultValue = "unknown" ]
    attribute aloud { data.xTruthValue }?,
    
    ## peut être utilisé pour indiquer si le sujet cité est
    ##         à considérer comme comme étant du discours direct ou du discours indirect.
    [ a:defaultValue = "true" ] attribute direct { data.xTruthValue }?,
    empty
  }
quote =
  
  ##  (citation) contient une expression ou un passage que le
  ##         narrateur ou l'auteur attribue à une origine extérieure au texte.
  element ns1:quote {
    macro.specialPara,
    att.global.attributes,
    att.typed.attributes,
    att.msExcerpt.attributes,
    empty
  }
q =
  
  ##  (séparé du texte environnant par des guillemets) contient un fragment qui est marqué (visiblement) comme
  ##     étant d’une manière ou d'une autre différent du texte environnant, pour diverses raisons telles
  ##     que, par exemple, un discours direct ou une pensée, des termes techniques ou du jargon, une mise
  ##     à distance par rapport à l’auteur, des citations empruntées et des passages qui sont mentionnés
  ##     mais non employés. 
  element ns1:q {
    macro.specialPara,
    att.global.attributes,
    att.ascribed.attributes,
    
    ## peut être utilisé pour indiquer si le passage cité
    ##         correspond à une parole ou à une pensée ou encore pour le caractériser plus finement.
    ## Les valeurs suggérées comprennent: 1] spoken; 2] thought; 3] written; 4] soCalled; 5] foreign (mots étrangers) ; 6] distinct (linguistiquement distinct) ; 7] term (terme technique) ; 8] emph (mis en valeur par un procédé rhétorique.) ; 9] mentioned
    attribute type {
      
      ## notation du discours direct
      "spoken"
      | 
        ## représentation de la pensée, par exemple un
        ##             monologue intérieur.
        "thought"
      | 
        ## citation d'une source écrite.
        "written"
      | 
        ## distance prise par rapport à l'auteur.
        "soCalled"
      | 
        ##  (mots étrangers) 
        "foreign"
      | 
        ##  (linguistiquement distinct) 
        "distinct"
      | 
        ##  (terme technique) 
        "term"
      | 
        ##  (mis en valeur par un procédé rhétorique.) 
        "emph"
      | 
        ## faisant référence à lui-même et non à son
        ##             référent habituel.
        "mentioned"
      | xsd:Name
    }?,
    empty
  }
cit =
  
  ##  (citation) citation provenant d'un autre document comprenant la
  ##     référence bibliographique de sa source. Dans un dictionnaire il peut contenir un exemple avec au
  ##     moins une occurrence du mot employé dans l’acception qui est décrite, ou une traduction du
  ##     mot-clé, ou un exemple.
  element ns1:cit {
    (model.qLike
     | model.egLike
     | model.biblLike
     | model.ptrLike
     | model.global
     | model.entryPart)+,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
mentioned =
  
  ## marque des mots ou des expressions mentionnées mais non
  ##         employées
  element ns1:mentioned {
    macro.phraseSeq, att.global.attributes, empty
  }
soCalled =
  
  ## contient une expression ou un mot pour lesquels l'auteur
  ##     ou le narrateur renonce à toute responsabilité, par exemple en utilisant de l'italique ou des
  ##     guillemets.
  element ns1:soCalled { macro.phraseSeq, att.global.attributes, empty }
desc =
  
  ##  (description) contient une courte description de l'objet documenté par
  ##     son élément parent, qui comprend son utilisation prévue, son but, ou son application là où c'est
  ##     approprié.
  element ns1:desc {
    macro.limitedContent,
    att.global.attributes,
    att.translatable.attributes,
    empty
  }
gloss =
  
  ##  (glose) identifie une expression ou un mot utilisé pour fournir
  ##     une glose ou une définition à quelque autre mot ou expression.
  element ns1:gloss {
    macro.phraseSeq,
    att.global.attributes,
    att.declaring.attributes,
    att.translatable.attributes,
    att.typed.attributes,
    att.pointing.attributes,
    
    ##  (référence canonique) identifie l'élément associé term au moyen
    ##         d'une référence canonique provenant d'un modèle défini par un élément refsDecl dans
    ##         l'en-tête TEI.
    attribute cRef { data.pointer }?,
    empty
  }
term =
  
  ##  (terme) contient un mot simple, un mot composé ou un symbole
  ##     considérés comme des termes techniques.
  element ns1:term {
    macro.phraseSeq,
    att.global.attributes,
    att.declaring.attributes,
    att.pointing.attributes,
    att.typed.attributes,
    att.canonical.attributes,
    
    ## identifie l'élément associé gloss
    ##           utilisant une référence canonique d'un schéma défini dans un élément refsDecl
    ##           dans l'en-tête TEI.
    attribute cRef { data.pointer }?,
    
    ## fournit la clé de tri pour ce terme dans un index
    attribute sortKey { data.word }?,
    empty
  }
sic =
  
  ##  (latin pour ainsi
  ##    ) contient du texte reproduit quoiqu'il est apparemment
  ##     incorrect ou inexact
  element ns1:sic {
    macro.paraContent,
    att.global.attributes,
    att.responsibility.attributes,
    empty
  }
corr =
  
  ## (correction) correctioncontient la forme correcte d'un passage
  ##     qui, apparemment  est erroné dans la copie du texte.
  element ns1:corr {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
choice =
  
  ##  (choix) regroupe un certain nombre de balisages alternatifs possibles
  ##         pour un même endroit  dans un texte.
  element ns1:choice {
    (model.choicePart | choice)*, att.global.attributes, empty
  }
reg =
  
  ##  (régularisation) contient une leçon qui a été régularisée ou normalisée
  ##         de façon quelconque
  element ns1:reg {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
orig =
  
  ##  (forme originale) contient une leçon notée comme étant fidèle à
  ##         l'original et non pas normalisée ou corrigée.
  element ns1:orig {
    macro.paraContent,
    att.global.attributes,
    att.responsibility.attributes,
    empty
  }
gap =
  
  ##  (omission) indique une omission dans une transcription, soit pour
  ##     des raisons éditoriales décrites dans l'en-tête TEI au cours d’un échantillonnage, soit parce
  ##     que le matériau est illisible ou inaudible.
  element ns1:gap {
    model.glossLike*,
    att.global.attributes,
    att.editLike.attributes,
    
    ## donne la raison de l'omission. Les valeurs
    ##         d'échantillon comprennent échantillonnage, illisible,
    ##         inaudible, non pertinent, biffé, biffé et
    ##         illisible.
    ##          
    attribute reason {
      list { data.word, data.word* }
    }?,
    
    ## lorsque du texte est omis de la transcription en
    ##         raison d'une suppression volontaire par une main identifiable, indique quelle est cette
    ##         main.
    attribute hand { data.pointer }?,
    
    ## lorsque du texte est omis de la transcription en
    ##         raison d'un dommage, catégorise la cause du dommage, si celle-ci peut être identifiée.
    ## Exemple de valeurs possibles: 1] rubbing; 2] mildew; 3] smoke
    attribute agent { data.enumerated }?,
    empty
  }
add =
  
  ##  ( ajout) contient des lettres, des mots ou des phrases
  ##         insérées dans le texte par un auteur, un copiste, un annotateur ou un correcteur.
  element ns1:add {
    macro.paraContent,
    att.global.attributes,
    att.transcriptional.attributes,
    att.placement.attributes,
    att.typed.attributes,
    empty
  }
del =
  
  ##  (suppression) contient une lettre, un mot ou un passage supprimé,
  ##     marqué comme supprimé, sinon indiqué comme superflu ou erroné dans le texte par un auteur, un
  ##     copiste, un annotateur ou un correcteur.
  element ns1:del {
    macro.paraContent,
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    empty
  }
unclear =
  
  ##  (incertain) contient un mot, une expression ou bien un passage qui
  ##         ne peut être transcrit avec certitude parce qu'il est illisible ou inaudible dans la source.
  element ns1:unclear {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    
    ## indique pourquoi il est difficile de transcrire
    ##                 le document
    attribute reason {
      list { data.word, data.word* }
    }?,
    
    ## lorsque la difficulté de transcription vient
    ##                 d'une action attribuable à une main identifiable (suppression partielle, etc.),
    ##                 indique quelle est cette main
    attribute hand { data.pointer }?,
    
    ## lorsque la difficulté de transcription vient
    ##                 d'un dommage, catégorise la cause du dommage si celle-ci peut être identifiée
    ## Exemple de valeurs possibles: 1] rubbing; 2] mildew; 3] smoke
    attribute agent { data.enumerated }?,
    empty
  }
name =
  
  ##  (nom, nom propre) contient un nom propre ou un syntagme nominal
  element ns1:name {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
rs =
  
  ##  (chaîne de référence) contient un nom générique ou une chaîne permettant de
  ##         s'y référer.
  element ns1:rs {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    
    ## indique plus spécifiquement l'objet référencé
    ##                 par la chaîne de référence. Les valeurs peuvent être : personne, lieu,
    ##                     bateau, élément, etc.
    attribute type { data.enumerated }?,
    empty
  }
email =
  
  ##  (adresse de courrier électronique) contient l'adresse de courriel identifiant un
  ##         emplacement où un courriel peut être envoyé.
  element ns1:email { macro.phraseSeq, att.global.attributes, empty }
address =
  
  ## contient une adresse postale ou d'un autre type, par
  ##         exemple l'adresse d'un éditeur, d'un organisme ou d'une personne.
  element ns1:address {
    (model.global*, (model.addrPart, model.global*)+),
    att.global.attributes,
    empty
  }
addrLine =
  
  ##  (ligne d'adresse) contient une ligne d'adresse postale.
  ##     
  element ns1:addrLine { macro.phraseSeq, att.global.attributes, empty }
street =
  
  ## adresse complète d'une rue comprenant un nom
  ##         ou un numéro identifiant un bâtiment ainsi que le nom de la rue ou du chemin sur laquelle
  ##         il est situé.
  element ns1:street { macro.phraseSeq, att.global.attributes, empty }
postCode =
  
  ##  (code postal) contient un code numérique ou alphanumérique qui fait
  ##         partie de l'adresse postale et sert à simplifier le tri ou la distribution du courrier.
  element ns1:postCode { text, att.global.attributes, empty }
postBox =
  
  ##  (boîte postale) contient un numéro ou un autre identifiant d'un lieu de
  ##     distribution du courrier autre qu'un nom de rue.
  element ns1:postBox { text, att.global.attributes, empty }
num =
  
  ##  (numéro) contient un numéro écrit sous une forme quelconque.
  element ns1:num {
    macro.phraseSeq,
    att.global.attributes,
    att.ranging.attributes,
    
    ## indique le type de valeur numérique
    ## Les valeurs suggérées comprennent: 1] cardinal; 2] ordinal; 3] fraction; 4] percentage
    attribute type {
      
      ## nombre absolu, par exemple 21, 21.5
      "cardinal"
      | 
        ## nombre ordinal, par exemple 21ème 
        "ordinal"
      | 
        ##  fraction, par exemple une moitié ou
        ##                         trois-quarts
        "fraction"
      | 
        ## un pourcentage
        "percentage"
      | xsd:Name
    }?,
    
    ## fournit la valeur d'un nombre sous une forme
    ##                 normalisée.
    attribute value { data.numeric }?,
    empty
  }
measure =
  
  ##  (mesure) contient un mot ou une expression faisant référence à
  ##         la quantité d'un objet ou d'un produit, comprenant en général un nombre, une unité et le nom
  ##         d'un produit.
  element ns1:measure {
    macro.phraseSeq,
    att.global.attributes,
    att.measurement.attributes,
    
    ## précise le type de mesure exprimée dans la
    ##                 typologie adaptée.
    attribute type { data.enumerated }?,
    empty
  }
measureGrp =
  
  ##  (groupe de mesures) contient un groupe de spécifications des dimensions qui
  ##     concernent un même objet, par exemple la hauteur et la largeur d'une page d'un manuscrit.
  element ns1:measureGrp {
    (text | model.gLike | model.measureLike)*,
    att.global.attributes,
    att.measurement.attributes,
    att.typed.attributes,
    empty
  }
date =
  
  ##  (date) contient une date exprimée dans n'importe quel format.
  element ns1:date {
    (text | model.gLike | model.phrase | model.global)*,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    
    ## indique le système ou le calendrier auquel appartient
    ##         la date exprimée dans le contenu de l'élément.
    ## Les valeurs suggérées comprennent: 1] Gregorian; 2] Julian; 3] Islamic; 4] Hebrew; 5] Revolutionary; 6] Iranian; 7] Coptic; 8] Chinese
    attribute calendar {
      
      ## calendrier grégorien
      "Gregorian"
      | 
        ## calendrier julien
        "Julian"
      | 
        ## calendrier lunaire (hijri) islamique ou musulman
        "Islamic"
      | 
        ## calendrier luni-solaire hébreu ou juif
        "Hebrew"
      | 
        ## calendrier révolutionnaire français
        "Revolutionary"
      | 
        ## calendrier solaire iranien ou perse (jalaali)
        "Iranian"
      | 
        ## calendrier copte ou alexandrin
        "Coptic"
      | 
        ## calendrier luni-solaire chinois
        "Chinese"
      | xsd:Name
    }?,
    empty
  }
time =
  
  ##  (temps) contient une expression qui précise un moment de la
  ##     journée sous n'importe quelle forme.
  element ns1:time {
    (text | model.gLike | model.phrase | model.global)*,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
abbr =
  
  ##  (abréviation) contient une abréviation quelconque.
  element ns1:abbr {
    macro.phraseSeq,
    att.global.attributes,
    att.responsibility.attributes,
    
    ## permet à l'encodeur de caractériser
    ##                 l'abréviation selon une typologie adéquate
    ## Exemple de valeurs possibles: 1] suspension; 2] contraction; 3] brevigraph; 4] superscription; 5] acronym; 6] title; 7] organization; 8] geographic
    attribute type { data.enumerated }?,
    empty
  }
expan =
  
  ##  (expansion) contient l'expansion d'une abréviation.
  element ns1:expan {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    empty
  }
ptr =
  
  ##  (pointeur) définit un pointeur vers un autre emplacement.
  element ns1:ptr {
    empty
    >> sch:pattern [
         id = "ptr-constraint-ptrAtts"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ptr"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "	attributes 'target' and 'cRef' may be supplied."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.pointing.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    
    ##  (référence canonique) précise la cible du pointeur en fournissant une
    ##         référence canonique issue d'un modèle défini par un élément refsDecldans l'En-tête
    ##         TEI.
    attribute cRef {
      list { data.word, data.word* }
    }?,
    empty
  }
ref =
  
  ##  (référence) définit une référence vers un autre emplacement  que
  ##    l' ajout d'un texte ou d'un commentaire modifie éventuellement. 
  element ns1:ref {
    macro.paraContent
    >> sch:pattern [
         id = "ref-constraint-refAtts"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ref"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "	attributes 'target' and 'cRef' may be supplied."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.pointing.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    
    ##  (référence canonique) spécifie la destination de la référence en
    ##         fournissant une référence canonique issue d'un modèle défini par un élément refsDecl
    ##         de l'en-tête TEI.
    attribute cRef {
      list { data.word, data.word* }
    }?,
    empty
  }
\list =
  
  ##  (liste) contient une suite d'items ordonnés dans une liste.
  element ns1:list {
    ((model.divTop | model.global)*,
     ((item, model.global*)+
      | (headLabel?,
         headItem?,
         (label, model.global*, item, model.global*)+)),
     (model.divBottom, model.global*)*),
    att.global.attributes,
    
    ## décrit la forme de la liste.
    ## Les valeurs suggérées comprennent: 1] ordered; 2] bulleted; 3] simple; 4] gloss
    [ a:defaultValue = "simple" ]
    attribute type {
      
      ## le classement des items de la liste est
      ##             alphanumérique
      "ordered"
      | 
        ## les items de la liste sont marqués par une puce
        ##             ou avec un autre signe typographique.
        "bulleted"
      | 
        ## les items de la liste ne sont pas numérotés ni
        ##             précédés d'une puce.
        "simple"
      | 
        ## chaque item de la liste commente un terme ou
        ##             concept qui est donné par un élément labelprécédant l'item de la liste.
        "gloss"
      | xsd:Name
    }?,
    empty
  }
item =
  
  ## contient un composant d'une liste.
  element ns1:item { macro.specialPara, att.global.attributes, empty }
label =
  
  ##  (étiquette) contient l'étiquette attachée à un item dans une liste ;
  ##     dans les glossaires marque le terme qui est défini.
  element ns1:label { macro.phraseSeq, att.global.attributes, empty }
head =
  
  ##  (en-tête) contient tout type d'en-tête, par exemple le titre d'une
  ##     section, ou l'intitulé d'une liste, d'un glossaire, d'une description de manuscrit, etc.
  element ns1:head {
    macro.paraContent,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
headLabel =
  
  ##  (intitulé d'une liste d'étiquettes) contient l'intitulé pour la colonne d'étiquettes ou de
  ##         termes dans un glossaire ou dans une liste structurée de la même manière. 
  element ns1:headLabel {
    macro.phraseSeq, att.global.attributes, empty
  }
headItem =
  
  ##  (intitulé d'une liste d'items ) contient l'intitulé pour la colonne d'items ou de
  ##         gloses dans un glossaire ou  dans une liste  semblablement structurée.
  element ns1:headItem { macro.phraseSeq, att.global.attributes, empty }
note =
  
  ## contient une note ou une annotation
  element ns1:note {
    macro.specialPara,
    att.global.attributes,
    att.placement.attributes,
    att.pointing.attributes,
    att.responsibility.attributes,
    att.typed.attributes,
    
    ## indique si l'exemplaire du texte montre l'emplacement
    ##         de référence exact pour la note
    [ a:defaultValue = "true" ] attribute anchored { data.truthValue }?,
    
    ## pointe vers la fin d'un passage auquel la note est
    ##         attachée, si la note n'est pas enchâssée dans le texte à cet endroit
    attribute targetEnd {
      list { data.pointer, data.pointer* }
    }?,
    empty
  }
index =
  
  ##  (entrée d'index) marque un emplacement à indexer dans un but quelconque
  element ns1:index {
    (term, index?)*,
    att.global.attributes,
    att.spanning.attributes,
    
    ## donne un nom pour préciser à quel index (parmi
    ##         plusieurs) appartient l'entrée d'index.
    attribute indexName { data.name }?,
    empty
  }
graphic =
  
  ## indique l'emplacement d'une image, d'une illustration ou
  ##     d'un schéma intégrés.
  element ns1:graphic {
    model.glossLike*,
    att.global.attributes,
    att.internetMedia.attributes,
    att.declaring.attributes,
    
    ## la largeur d’affichage de l’image
    attribute width { data.outputMeasurement }?,
    
    ## la hauteur d’affichage de l’image 
    attribute height { data.outputMeasurement }?,
    
    ## facteur d'échelle à appliquer à l'image pour
    ##         l'afficher à la taille désirée.
    attribute scale { data.numeric }?,
    
    ##  (adresse URL) l'URL cible
    attribute url { data.pointer },
    empty
  }
binaryObject =
  
  ## fournit des données binaires encodées qui représentent
  ##     une image ou un autre objet insérés dans le texte ou dans un autre objet.
  element ns1:binaryObject {
    text,
    att.global.attributes,
    att.internetMedia.attributes,
    
    ## la largeur d'affichage de l'objet 
    attribute width { data.outputMeasurement }?,
    
    ## la hauteur d'affichage de l'objet
    attribute height { data.outputMeasurement }?,
    
    ## facteur d'échelle à appliquer à l'objet pour
    ##         l'afficher à la taille désirée.
    attribute scale { data.numeric }?,
    
    ## l'encodage utilisé pour encoder les données binaires.
    ##         Sans autre spécification il est supposé s'agir de Base64. 
    attribute encoding {
      list { data.word, data.word* }
    }?,
    empty
  }
milestone =
  
  ##  (balise de bornage) marque un point séparant n'importe quelle section d'un
  ##     texte qui indique, habituellement mais pas nécessairement, un endroit à partir duquel une
  ##     certaine partie d'un système standard de référence change et que ce changement n'est pas
  ##     représenté par un élément structurel.
  element ns1:milestone {
    empty,
    att.global.attributes,
    att.typed.attributes,
    att.sourced.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    
    ## fournit un nom conventionnel pour le type de section
    ##         qui change à partir de cette balise de bornage
    ## Les valeurs suggérées comprennent: 1] page; 2] column; 3] line; 4] book; 5] poem; 6] canto; 7] speaker; 8] stanza; 9] act; 10] scene; 11] section; 12] absent; 13] unnumbered
    attribute unit {
      
      ## sauts de page matériels (synonymes de l'élément
      ##               pb)
      "page"
      | 
        ## sauts de colonnes
        "column"
      | 
        ## sauts de ligne (synonymes de
        ##             l'élémentlb)
        "line"
      | 
        ##  unité quelconque désignée par les termes livre,
        ##             feuillet, etc.
        "book"
      | 
        ## poèmes séparés dans une collection
        "poem"
      | 
        ## chants ou autres parties principales dans une
        ##             poésie
        "canto"
      | 
        ## changement de locuteur ou de narrateur
        "speaker"
      | 
        ## strophes dans une poésie, livre, ou chant
        "stanza"
      | 
        ## actes dans une pièce
        "act"
      | 
        ## scènes dans une pièce ou dans un acte
        "scene"
      | 
        ## parties de toute catégorie.
        "section"
      | 
        ## passages qui ne sont pas présents dans l'édition
        ##             de référence.
        "absent"
      | 
        ## passages figurant dans le texte, mais qui ne sont
        ##             pas destinés à être inclus comme élément de référence. 
        "unnumbered"
      | xsd:Name
    },
    empty
  }
pb =
  
  ##  (saut de page) marque la limite entre une page d'un texte et la page
  ##     suivante dans un système de référence normalisé.
  element ns1:pb {
    empty,
    att.global.attributes,
    att.typed.attributes,
    att.sourced.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
lb =
  
  ##  (saut de ligne) marque le début d'une nouvelle ligne (typographique) dans
  ##     une édition ou dans une version d'un texte.
  element ns1:lb {
    empty,
    att.global.attributes,
    att.typed.attributes,
    att.sourced.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
cb =
  
  ##  (saut de colonne) Dans un système de référence normalisé, marque dans un texte la frontière entre une colonne et la suivante.
  element ns1:cb {
    empty,
    att.global.attributes,
    att.typed.attributes,
    att.sourced.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
analytic =
  
  ##  (niveau analytique) contient des éléments descriptifs qui décrivent la
  ##     bibliographie d'une ressource (par exemple un poème ou un article de revue) publiée à
  ##     l'intérieur d'une monographie ou d'une ressource et non publiée de façon indépendante.
  element ns1:analytic {
    (author | editor | respStmt | title | ref | date)*,
    att.global.attributes,
    empty
  }
monogr =
  
  ##  (niveau monographique) contient des données bibliographiques décrivant un objet
  ##     (par exemple une monographie ou une revue) publié comme un élément indépendant (i.e.
  ##     matériellement séparé.
  element ns1:monogr {
    ((((author | editor | respStmt),
       (author | editor | respStmt)*,
       title+,
       (idno | editor | respStmt)*)
      | ((title | ref)+, (idno | author | editor | respStmt)*))?,
     (model.noteLike | meeting)*,
     (edition, (idno | editor | respStmt)*)*,
     imprint,
     (imprint | extent | biblScope)*),
    att.global.attributes,
    empty
  }
series =
  
  ##  (informations sur la série) contient une information sur la série dans laquelle une
  ##     monographie ou un autre élément bibliographique ont paru. 
  element ns1:series {
    (text
     | model.gLike
     | title
     | ref
     | editor
     | respStmt
     | biblScope
     | model.global)*,
    att.global.attributes,
    empty
  }
author =
  
  ##  (auteur) dans une référence bibliographique contient le nom de la
  ##     (des) personne(s) physique(s) ou du collectif, auteur(s) d'une oeuvre ; la première mention de
  ##     responsabilité comme seul élément bibliographique. 
  element ns1:author {
    macro.phraseSeq, att.global.attributes, att.naming.attributes, empty
  }
editor =
  
  ## mention de responsabilité secondaire pour un item
  ##     bibliographique, par exemple le nom d'une personne, d'une institution ou d'un organisme (ou de
  ##     plusieurs d'entre eux) comme éditeur scientifique, compilateur, traducteur, etc.
  element ns1:editor {
    macro.phraseSeq, att.global.attributes, att.naming.attributes, empty
  }
respStmt =
  
  ##  (mention de responsabilité) donne une mention de responsabilité quant au contenu
  ##     intellectuel d'un texte, d'une édition, d'un enregistrement ou d'une publication en série,
  ##     lorsque les éléments spécifiques relatifs aux auteurs, éditeurs, etc. ne suffisent pas ou ne
  ##     s'appliquent pas.
  element ns1:respStmt {
    ((resp+, model.nameLike.agent+) | (model.nameLike.agent+, resp+)),
    att.global.attributes,
    empty
  }
resp =
  
  ##  (responsabilité) contient une expression décrivant la nature de la
  ##     responsabilité intellectuelle d'une personne.
  element ns1:resp {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
title =
  
  ##  (titre) contient le titre complet d'une oeuvre quelconque
  element ns1:title {
    macro.paraContent,
    att.global.attributes,
    att.canonical.attributes,
    
    ## indique le niveau
    ##                                         bibliographique d'un titre, c'est-à-dire si ce titre
    ##                                         identifie un article, un livre, une revue, une collection,
    ##                                         ou un document non publié
    attribute level {
      
      ##  (titre
      ##                                                   analytique (article, poème ou autre item
      ##                                                   publié en tant que partie d'un item plus
      ##                                                   large)) titre
      ##                                                   analytique (article, poème ou autre,
      ##                                                   publié comme partie d'un ensemble plus
      ##                                                   grand)
      "a"
      | 
        ##  (titre de
        ##                                                   monographie (livre, recueil ou autre
        ##                                                   item publié séparément, y compris des
        ##                                                   volumes isolés d'ouvrages en plusieurs
        ##                                                   volumes)) titre de
        ##                                                   monographie (livre, ensemble ou autre,
        ##                                                   publié comme un document distinct, y
        ##                                                   compris les volumes isolés d'ouvrages en
        ##                                                   plusieurs volumes)
        "m"
      | 
        ##  (titre de
        ##                                                   revue) titre de
        ##                                                   périodique
        "j"
      | 
        ##  (titre de
        ##                                                   collection) titre de
        ##                                                   publication en série
        "s"
      | 
        ##  (titre de
        ##                                                   document non publié (incluant des thèses
        ##                                                   et des mémoires s'il ne s'agit pas de
        ##                                                   publications éditées par un éditeur
        ##                                                   commercial)) titre de
        ##                                                   matériau non publié (thèses et
        ##                                                   dissertations comprises, à l'exception
        ##                                                   de leurs éditions commerciales)
        "u"
    }?,
    
    ## caractérise le titre selon
    ##                                         une typologie adaptée.
    ## Exemple de valeurs possibles: 1] main; 2] sub (titre de
    ## niveau inférieur, titre de partie) ; 3] alt (titre
    ## alternatif, souvent dans une autre
    ## langue, par lequel l'oeuvre est
    ## également connu) ; 4] short; 5] desc (paraphrase descriptive de l'oeuvre
    ## ayant les fonctions d'un titre) 
    attribute type { data.enumerated }?,
    empty
  }
meeting =
  
  ## contient le titre descriptif formalisé d’une réunion ou
  ##     d’une conférence, employé dans une description bibliographique pour un article provenant d'une
  ##     telle réunion, ou comme le titre ou le préambule aux publications qui en émanent. 
  element ns1:meeting {
    macro.limitedContent, att.global.attributes, empty
  }
imprint =
  
  ## regroupe des informations relatives à la
  ##         publication ou à la distribution d'un élément bibliographique.
  element ns1:imprint {
    ((model.imprintPart | model.dateLike), model.global*)+,
    att.global.attributes,
    empty
  }
publisher =
  
  ##  (éditeur) donne le nom de l'organisme responsable de la
  ##         publication ou de la distribution d'un élément bibliographique.
  element ns1:publisher {
    macro.phraseSeq, att.global.attributes, empty
  }
biblScope =
  
  ##  (extension d'une référence bibliographique.) définit l'extension d'une référence
  ##         bibliographique, comme par exemple une liste de numéros de pages, ou le nom
  ##         d'une subdivision d'une oeuvre plus étendue.
  element ns1:biblScope {
    macro.phraseSeq,
    att.global.attributes,
    
    ## identifie le type d'information
    ##         que transmet l'élément, par exemple colonnes, pages, volume, etc.
    ## Les valeurs suggérées comprennent: 1] vol(volume) ; 2] issue; 3] pp(pages) ; 4] ll (lines) ; 5] chap ((chapitre) l'élément
    ##                         contient une indication de chapitre (numéro et/ou
    ##                         titre)) ; 6] part
    attribute type {
      
      ## (volume)  volumel'élément contient un numéro de volume.
      "vol"
      | 
        ## l'élément contient un numéro de
        ##                         livraison ou bien un numéro de volume et de livraison.
        "issue"
      | 
        ## (pages)  pages l'élément contient un nombre de pages
        ##                         ou l'étendue de sélection des pages.
        "pp"
      | 
        ##  (lines) the element contains a line number or line range.
        "ll"
      | 
        ##  ((chapitre) l'élément
        ##                         contient une indication de chapitre (numéro et/ou
        ##                         titre)) l'élément contient une indication de
        ##                         chapitre (le numéro et/ou le titre)
        "chap"
      | 
        ## l'élément identifie une partie d'un
        ##                         livre ou une anthologie.
        "part"
      | xsd:Name
    }?,
    
    ## specifies the starting point of the range of units indicated by the type attribute.
    attribute from { data.word }?,
    
    ## specifies the end-point of the range of units indicated by the type attribute.
    attribute to { data.word }?,
    empty
  }
pubPlace =
  
  ##  (lieu de publication) contient le nom du lieu de publication dans une référence
  ##         bibliographique.
  element ns1:pubPlace {
    macro.phraseSeq, att.global.attributes, att.naming.attributes, empty
  }
bibl =
  
  ##  (référence bibliographique.) contient une référence bibliographique faiblement
  ##     structurée dans laquelle les sous-composants peuvent ou non être explicitement balisés.
  element ns1:bibl {
    (text
     | model.gLike
     | model.highlighted
     | model.pPart.data
     | model.pPart.edit
     | model.segLike
     | model.ptrLike
     | model.biblPart
     | model.global)*,
    att.global.attributes,
    att.declarable.attributes,
    att.typed.attributes,
    empty
  }
biblStruct =
  
  ##  (référence bibliographique structurée) contient une référence bibliographique dans laquelle
  ##     seuls des sous-éléments bibliographiques apparaissent et cela, selon un ordre déterminé.
  element ns1:biblStruct {
    (analytic*,
     (monogr, series*)+,
     (model.noteLike | idno | relatedItem)*),
    att.global.attributes,
    att.declarable.attributes,
    att.typed.attributes,
    empty
  }
listBibl =
  
  ##  (liste de références bibliographiques) contient une liste de références
  ##         bibliographiques de toute nature.
  element ns1:listBibl {
    (model.headLike*,
     (model.biblLike | model.milestoneLike | listBibl)+),
    att.global.attributes,
    att.declarable.attributes,
    att.typed.attributes,
    empty
  }
relatedItem =
  
  ## contient ou se référe à un autre élément bibliographique
  ##     ayant une relation quelconque avec l'objet décrit, par exemple comme faisant partie ou comme
  ##     étant une version alternative de celui-ci.
  element ns1:relatedItem {
    ((model.biblLike | model.ptrLike)?)
    >> sch:pattern [
         id = "relatedItem-constraint-targetorcontent11"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relatedItem"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and count( child::* ) > 0"
             "If the 'target' attribute is used, the\x{a}" ~
             "        relatedItem element must be empty"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "relatedItem-constraint-targetorcontent11"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relatedItem"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@target or child::*"
             "A relatedItem element should have either a 'target' attribute\x{a}" ~
             "        or a child element to indicate the related bibliographic item"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.typed.attributes,
    
    ## points to the related bibliographic element by means of an
    ##       absolute or relative URI reference
    attribute target { data.pointer }?,
    empty
  }
l =
  
  ##  (vers) contient un seul vers, éventuellement incomplet.
  element ns1:l {
    macro.paraContent,
    att.global.attributes,
    att.metrical.attributes,
    att.enjamb.attributes,
    
    ## précise si le vers est métriquement complet ou non.
    [ a:defaultValue = "N" ]
    attribute part {
      
      ##  (oui) le vers est métriquement incomplet.
      "Y"
      | 
        ##  (non) soit le vers est complet, soit aucune rmention
        ##             n'est faite quant à son intégralité. 
        "N"
      | 
        ##  (début) le début d'un vers incomplet
        "I"
      | 
        ##  (milieu) partie médiane d'un vers incomplet
        "M"
      | 
        ##  (fin) la partie finale d'un vers incomplet.
        "F"
    }?,
    empty
  }
lg =
  
  ##  (groupe de vers) contient un groupe de vers fonctionnant comme une unité
  ##         formelle, par exemple une strophe, un refrain, un paragraphe en vers, etc.
  element ns1:lg {
    ((model.divTop | model.global)*,
     (model.lLike | lg),
     (model.lLike | lg | model.global)*,
     (model.divBottom, model.global*)*),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
sp =
  
  ##  (langue orale) monologue dans un texte écrit pour la scène ou, passage
  ##     présenté sous cette forme dans un texte en prose ou en vers.
  element ns1:sp {
    (model.global*,
     (speaker, model.global*)?,
     ((model.lLike | lg | model.pLike | model.stageLike | model.qLike),
      model.global*)+),
    att.global.attributes,
    att.ascribed.attributes,
    empty
  }
speaker =
  
  ## forme particulière de titre ou de marque qui donne le
  ##         nom d'un ou de  plusieurs locuteurs dans un texte ou dans un fragment de texte écrit pour le
  ##         théâtre.
  element ns1:speaker { macro.phraseSeq, att.global.attributes, empty }
stage =
  
  ##  (indication scénique) contient tout type d'indication scénique à l 'intérieur
  ##         d'un texte ou fragment de texte écrit pour le théâtre.
  element ns1:stage {
    macro.specialPara,
    att.global.attributes,
    
    ## indique le type d'indication scénique
    ## Les valeurs suggérées comprennent: 1] setting; 2] entrance; 3] exit; 4] business; 5] novelistic; 6] delivery; 7] modifier; 8] location; 9] mixed
    attribute type {
      
      ## décrit une mise en scène
      "setting"
      | 
        ## décrit une entrée
        "entrance"
      | 
        ## décrit une sortie
        "exit"
      | 
        ## décrit un jeu de scène
        "business"
      | 
        ## texte explicatif de la direction de scène.
        "novelistic"
      | 
        ## décrit la façon dont parle un
        ##                         personnage
        "delivery"
      | 
        ## donne certains détails à propos d'un
        ##                         personnage
        "modifier"
      | 
        ## décrit un lieu
        "location"
      | 
        ## plusieurs des indications précédentes
        "mixed"
      | xsd:Name
    }?,
    empty
  }
teiCorpus =
  
  ## contient la totalité d'un corpus encodé selon la TEI,
  ##     comprenant un seul en-tête de corpus et un ou plusieurs éléments TEI dont chacun contient un
  ##     seul en-tête textuel et un texte
  element ns1:teiCorpus {
    (teiHeader, (TEI | teiCorpus)+),
    att.global.attributes,
    
    ## la version du modèle TEI
    [ a:defaultValue = "5.0" ] attribute version { data.version }?,
    empty
  }
divGen =
  
  ##  (division de texte générée automatiquement.) indique l'emplacement où doit apparaître une
  ##         division du texte générée automatiquement par une application de traitement de
  ##         texte.
  element ns1:divGen {
    model.headLike*,
    att.global.attributes,
    
    ## précise le type de section de
    ##                 texte qui apparaîtra par génération automatique (par exemple :  index,
    ##                 table des matières, etc.)
    ## Exemple de valeurs possibles: 1] index; 2] toc; 3] figlist; 4] tablist
    attribute type { data.enumerated }?,
    empty
  }
s =
  
  ##  (phrase) contient une division textuelle de type phrase
  element ns1:s {
    macro.phraseSeq
    >> sch:pattern [
         id = "s-constraint-noNestedS"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:s"
           "\x{a}" ~
           "               "
           sch:report [
             test = "tei:s"
             "You may not nest one s element within\x{a}" ~
             "      another: use seg instead"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    empty
  }
cl =
  
  ## (clause) propositionreprésente une proposition grammaticale
  element ns1:cl {
    macro.phraseSeq,
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    empty
  }
phr =
  
  ##  (syntagme) représente un syntagme grammatical
  element ns1:phr {
    macro.phraseSeq,
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    empty
  }
w =
  
  ##  (mot) représente un mot grammatical (pas nécessairement
  ##       orthographique)
  element ns1:w {
    (text
     | model.gLike
     | seg
     | w
     | m
     | c
     | model.global
     | model.lPart
     | model.hiLike
     | model.pPart.edit)*,
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    
    ## fournit le lemme du mot (entrée du
    ##           dictionnaire)
    attribute lemma { data.key }?,
    
    ## provides a pointer to a definition of the lemma for the
    ##       word, for example in an online lexicon. 
    attribute lemmaRef { data.pointer }?,
    empty
  }
m =
  
  ##  (morphème) représente un morphème grammatical
  element ns1:m {
    (text | model.gLike | seg | m | c | model.global)*,
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    
    ## identifie la forme de base du morphème
    attribute baseForm { data.word }?,
    empty
  }
c =
  
  ##  (caractère) représente un caractère
  element ns1:c {
    macro.xtext,
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    empty
  }
pc =
  
  ##  (punctuation character) a character or string of characters regarded as constituting a
  ##   single punctuation mark.
  element ns1:pc {
    (text | model.gLike | c)*,
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    
    ## indicates the extent to which this punctuation mark
    ##       conventionally separates words or phrases
    attribute force {
      
      ## the punctuation mark is a word separator
      "strong"
      | 
        ## the punctuation mark is not a word separator
        "weak"
      | 
        ## the punctuation mark may or may not be a
        ## word separator
        "inter"
    }?,
    
    ## provides a name for the kind of unit delimited by  this punctuation mark.
    attribute unit { data.enumerated }?,
    
    ## indicates whether this punctuation mark precedes or
    ##       follows the unit it delimits.
    attribute pre { data.truthValue }?,
    empty
  }
att.global.analytic.attributes = att.global.analytic.attribute.ana
att.global.analytic.attribute.ana =
  
  ##  (analyse) indique un ou plusieurs éléments contenant des
  ##           interprétations de l'élément qui porte l'attribut ana.
  attribute ana {
    list { data.pointer, data.pointer* }
  }?
span =
  
  ## associe une interprétation sous forme d'annotation
  ##     directement à un passage donné dans un texte.
  element ns1:span {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.interpLike.attributes,
    
    ## précise le début du passage sur lequel porte
    ##         l'annotation ; s'il n'est pas accompagné d'un attribut to, désigne alors
    ##         l'intégralité du passage
    attribute from { data.pointer },
    
    ## spécifie la fin du passage annoté.
    attribute to { data.pointer }?,
    empty
  }
spanGrp =
  
  ##  (groupement de fragments de texte) regroupe des éléments span
  element ns1:spanGrp {
    span*, att.global.attributes, att.interpLike.attributes, empty
  }
interp =
  
  ##  (interprétation) interprétation sous la forme d'une annotation concise,
  ##     pouvant être liée à un passage dans un texte
  element ns1:interp {
    (text | model.gLike | model.glossLike)*,
    att.global.attributes,
    att.interpLike.attributes,
    empty
  }
interpGrp =
  
  ##  (groupe d'interprétations) regroupe un ensemble d'interprétations ayant en commun
  ##     une mention de responsabilité ou un type
  element ns1:interpGrp {
    (model.glossLike*, interp+),
    att.global.attributes,
    att.interpLike.attributes,
    empty
  }
precision =
  
  ## indicates the numerical accuracy or precision  associated
  ##   with some aspect of the text markup. 
  element ns1:precision {
    model.glossLike*,
    att.global.attributes,
    att.scoping.attributes,
    
    ## indicates the degree of precision to be assigned as a
    ##       value between 0 (none) and 1 (optimally precise)
    attribute degree { data.probability }?,
    
    ## supplies a standard deviation associated with the value in
    ##       question
    attribute stdDeviation { data.numeric }?,
    empty
  }
certainty =
  
  ## Indique le degré de certitude ou d'incertitude
  ##       associé à certains aspects du balisage du texte.
  element ns1:certainty {
    model.glossLike*,
    att.global.attributes,
    att.scoping.attributes,
    
    ## Indique le point précis sur lequel porte
    ##           l'incertitude de balisage : pertinence de l'élément, position exacte de la balise de début
    ##           ou de fin, valeur d'un attribut spécifique, etc.
    attribute locus {
      
      ## uncertainty concerns whether the name of the element
      ##	  or attribute  used is correctly applied.
      "name"
      | 
        ## uncertainty concerns whether the start of the element
        ##	  is correctly identified.
        "start"
      | 
        ## uncertainty concerns whether the end of the element
        ##	  is correctly identified.
        "end"
      | 
        ## uncertainty concerns both the start and the end of the
        ##	  element.
        "location"
      | 
        ## uncertainty concerns the content (for an element) or
        ##	  the value (for an attribute)
        "value"
    },
    
    ## fournit une valeur alternative pour l'aspect d'un
    ##           balisage jugé incertain - un identifiant générique, une transcription ou une valeur
    ##           d'attribut, ou l'identifiant d'un élément anchor (pour indiquer un
    ##           emplacement alternatif de début ou de fin). Si un attribut assertedValue est
    ##           présent, le degré de confiance spécifié par l'attribut degree s'applique au
    ##           balisage alternatif précisé par la valeur d' assertedValue; s'il n'y a pas
    ##           d'attribut assertedValue, ce degré de confiance s'applique au balisage du
    ##           texte.
    attribute assertedValue { data.pointer | data.name | data.word }?,
    
    ## Indique les conditions présumées lors de
    ##           l'attribution d'un degré de confiance.
    attribute given {
      list { data.pointer, data.pointer* }
    }?,
    
    ## Indique le degré de confiance attribué à l'aspect
    ##           du balisage que désigne l'attribut locus.
    attribute degree { data.probability }?,
    empty
  }
respons =
  
  ##  (Responsabilité) identifie le ou les personne(s) responsable(s) d'un
  ##       aspect du balisage pour un ou plusieurs éléments particuliers. 
  element ns1:respons {
    model.glossLike*,
    att.global.attributes,
    att.scoping.attributes,
    
    ## Indique l'aspect spécifique du balisage sur
    ##           lequel porte la responsabilité.
    attribute locus {
      list {
        (
         ## responsibility is being assigned concerning the name of the element
         ##	  or attribute used.
         "name"
         | 
           ## responsibility is being assigned concerning the start of the element
           ##	  concerned.
           "start"
         | 
           ## responsibility is being assigned concerning the end of the element
           ##	  concerned.
           "end"
         | 
           ## responsibility is being assigned concerning the location of the element
           ##	  concerned.
           "location"
         | 
           ## responsibility is being assigned concerning the content (for an element) or
           ##	  the value (for an attribute)
           "value"),
        (
         ## responsibility is being assigned concerning the name of the element
         ##	  or attribute used.
         "name"
         | 
           ## responsibility is being assigned concerning the start of the element
           ##	  concerned.
           "start"
         | 
           ## responsibility is being assigned concerning the end of the element
           ##	  concerned.
           "end"
         | 
           ## responsibility is being assigned concerning the location of the element
           ##	  concerned.
           "location"
         | 
           ## responsibility is being assigned concerning the content (for an element) or
           ##	  the value (for an attribute)
           "value")*
      }
    },
    
    ##  (responsable) Identifie la personne ou l'organisme responsable
    ##           de l'aspect en question dans le document TEI
    attribute resp { data.pointer },
    empty
  }
table =
  
  ##  (tableau) contient du texte affiché sous forme de tableau, en
  ##     rangées et colonnes.
  element ns1:table {
    ((model.headLike | model.global)*, (row, model.global*)+),
    att.global.attributes,
    
    ## indique le nombre de rangées dans le tableau.
    attribute rows { data.count }?,
    
    ##  (colonnes) indique le nombre de colonnes dans chaque rangée du
    ##         tableau.
    attribute cols { data.count }?,
    empty
  }
row =
  
  ##  (rangée) contient une rangée d'un tableau.
  element ns1:row {
    cell+, att.global.attributes, att.tableDecoration.attributes, empty
  }
cell =
  
  ##  (cellule) contient une cellule d'un tableau.
  element ns1:cell {
    macro.paraContent,
    att.global.attributes,
    att.tableDecoration.attributes,
    empty
  }
formula =
  
  ##  (formule) contient une formule mathématique ou tout autre type de
  ##     formule
  element ns1:formula {
    (text | model.graphicLike)*,
    att.global.attributes,
    
    ## précise le nom d'une notation définie précédemment,
    ##         utilisée dans le contenu de l'élément.
    attribute notation { data.code }?,
    empty
  }
figure =
  
  ##  (figure) Regroupe des éléments représentant ou contenant une
  ##     information graphique comme une illustration ou une figure.
  element ns1:figure {
    (model.headLike
     | model.pLike
     | figDesc
     | model.graphicLike
     | model.egLike
     | floatingText
     | model.global)*,
    att.global.attributes,
    att.placement.attributes,
    att.typed.attributes,
    empty
  }
figDesc =
  
  ##  (description d'une figure) contient une brève description de l'apparence ou
  ##			du contenu d'une représentation graphique, pour documenter une image sans avoir à
  ##			l'afficher
  element ns1:figDesc {
    macro.limitedContent, att.global.attributes, empty
  }
g =
  
  ##  (caractère ou glyphe) représente un caractère ou un glyphe non standard
  element ns1:g {
    text,
    att.global.attributes,
    att.typed.attributes,
    
    ## pointe vers la description du caractère ou du glyphe
    ##         visé
    attribute ref { data.pointer }?,
    empty
  }
char =
  
  ##  (caractère) fournit des informations descriptives sur un
  ##			caractère
  element ns1:char {
    (charName?,
     model.glossLike*,
     charProp*,
     mapping*,
     figure*,
     model.graphicLike*,
     model.noteLike*),
    att.global.attributes,
    empty
  }
charName =
  
  ##  (nom de caractère) contient le nom d'un caractère exprimé selon les
  ##     conventions de l'Unicode
  element ns1:charName { text, att.global.attributes, empty }
charProp =
  
  ##  (propriété d'un caractère) fournit un nom et une valeur pour une propriété
  ##     quelconque d'un caractère ou d'un glyphe défini dans l'élément parent
  element ns1:charProp {
    ((unicodeName | localName), value),
    att.global.attributes,
    att.typed.attributes,
    empty
  }
charDecl =
  
  ##  (description de caractère) fournit des informations sur des caractères
  ##     ou des glyphes sortant de l'ordinaire
  element ns1:charDecl {
    (desc?, (char | glyph)+),
    att.global.attributes,
    empty
  }
glyph =
  
  ##  (glyphe d'un caractère) fournit des informations descriptives sur un
  ##			glyphe
  element ns1:glyph {
    (glyphName?,
     model.glossLike*,
     charProp*,
     mapping*,
     figure*,
     model.graphicLike*,
     model.noteLike*),
    att.global.attributes,
    empty
  }
glyphName =
  
  ##  (nom du glyphe d'un caractère) contient le nom d'un glyphe, exprimé selon les
  ##     conventions de l'Unicode pour les noms de caractère
  element ns1:glyphName { text, att.global.attributes, empty }
localName =
  
  ##  (nom de propriété défini localement) contient un nom défini localement pour une propriété
  element ns1:localName { text, att.global.attributes, empty }
mapping =
  
  ##  (caractères associés) contient un ou plusieurs caractères reliés par
  ##			certains aspects (spécifiés par l'attribut type) au glyphe ou au caractère
  ##			défini dans l'élément parent
  element ns1:mapping {
    macro.xtext, att.global.attributes, att.typed.attributes, empty
  }
unicodeName =
  
  ##  (nom de propriété Unicode) contient le nom d'une propriété normative ou informative enregistré
  ##     en Unicode
  element ns1:unicodeName {
    text,
    att.global.attributes,
    
    ## spécifie le numéro de version de la norme Unicode
    ##         où se trouve défini ce nom de propriété
    attribute version { data.version }?,
    empty
  }
value =
  
  ##  (valeur) contient une valeur unique pour une propriété,
  ##			pour un attribut ou pour tout autre élément d'analyse
  element ns1:value { macro.xtext, att.global.attributes, empty }
teiHeader =
  
  ##  (en-tête TEI)  donne des informations descriptives et déclaratives qui
  ##     constituent une page de titre électronique au début de tout texte conforme à la TEI.
  element ns1:teiHeader {
    (fileDesc, model.teiHeaderPart*, revisionDesc?),
    att.global.attributes,
    
    ## spécifie le type de document auquel l'en-tête TEI se
    ##         rapporte.
    ## Exemple de valeurs possibles: 1] text; 2] corpus
    [ a:defaultValue = "text" ] attribute type { data.enumerated }?,
    empty
  }
fileDesc =
  
  ##  (description bibliographique du fichier.) contient une description bibliographique complète du
  ##     fichier électronique.
  element ns1:fileDesc {
    ((titleStmt,
      editionStmt?,
      extent?,
      publicationStmt,
      seriesStmt?,
      notesStmt?),
     sourceDesc+),
    att.global.attributes,
    empty
  }
titleStmt =
  
  ##  (mention de titre)  regroupe les informations sur le titre d’une œuvre et
  ##     les personnes ou institutions responsables de son contenu intellectuel.
  element ns1:titleStmt {
    (title+, model.respLike*), att.global.attributes, empty
  }
sponsor =
  
  ##  (commanditaire ) indique le nom d’une institution ou d’un organisme
  ##     partenaires.
  element ns1:sponsor {
    macro.phraseSeq.limited, att.global.attributes, empty
  }
funder =
  
  ##  (financeur) désigne le nom d’une personne ou d’un organisme
  ##     responsable du financement d’un projet ou d’un texte.
  element ns1:funder {
    macro.phraseSeq.limited, att.global.attributes, empty
  }
principal =
  
  ##  (chercheur principal) donne le nom du chercheur  qui est principalement responsable de la création d’un texte électronique.
  element ns1:principal {
    macro.phraseSeq.limited, att.global.attributes, empty
  }
editionStmt =
  
  ##  (mention d'édition) regroupe les informations relatives à l’édition d’un texte.
  element ns1:editionStmt {
    (model.pLike+ | (edition, respStmt*)),
    att.global.attributes,
    empty
  }
edition =
  
  ##  (édition) décrit les particularités de l’édition d’un texte.
  element ns1:edition { macro.phraseSeq, att.global.attributes, empty }
extent =
  
  ##  (étendue)  décrit la taille approximative d’un texte stocké sur son
  ##     support, numérique ou non-numérique, exprimé dans une unité quelconque appropriée.
  element ns1:extent { macro.phraseSeq, att.global.attributes, empty }
publicationStmt =
  
  ##  (mention de publication)  regroupe des informations concernant la publication ou
  ##     la diffusion d’un texte électronique ou d’un autre type de texte.
  element ns1:publicationStmt {
    (model.pLike+ | model.publicationStmtPart+),
    att.global.attributes,
    empty
  }
distributor =
  
  ##  (Diffuseur) donne le nom d’une personne ou d’un organisme responsable de la diffusion d’un texte.
  element ns1:distributor {
    macro.phraseSeq, att.global.attributes, empty
  }
authority =
  
  ##  (responsable de la publication.)  donne le nom de la personne ou de l'organisme responsable de la publication d’un fichier électronique, autre qu’un éditeur ou un distributeur.
  element ns1:authority {
    macro.phraseSeq.limited, att.global.attributes, empty
  }
idno =
  
  ##  (identifiant) donne un numéro normalisé ou non qui peut être utilisé
  ##     pour identifier une référence bibliographique.
  element ns1:idno {
    macro.xtext,
    att.global.attributes,
    
    ## classe un numéro dans une catégorie, par exemple
    ##         comme étant un numéro ISBN ou comme appartenant une autre série normalisée.
    attribute type { data.enumerated }?,
    empty
  }
availability =
  
  ##  (disponibilité) renseigne sur la disponibilité du texte, par exemple sur
  ##     toutes restrictions quant à son usage ou sa diffusion, son statut de copyright, etc.
  element ns1:availability {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    
    ## donne un code caractérisant la disponibilité
    ##         actuelle d’un texte.
    [ a:defaultValue = "unknown" ]
    attribute status {
      
      ## Le texte est libre de droits.
      "free"
      | 
        ## Le statut du texte est inconnu.
        "unknown"
      | 
        ## le texte est sous droits.
        "restricted"
    }?,
    empty
  }
seriesStmt =
  
  ##  (mention de collection) regroupe toute information relative à la collection (si
  ##     elle existe) à laquelle appartient une publication.
  element ns1:seriesStmt {
    (model.pLike+
     | (title+, (idno | respStmt)*)),
    att.global.attributes,
    empty
  }
notesStmt =
  
  ##  (mention de notes) rassemble toutes les notes fournissant des informations
  ##     sur un texte, en plus des informations mentionnées dans d'autres parties de la description
  ##     bibliographique.
  element ns1:notesStmt {
    model.noteLike+, att.global.attributes, empty
  }
sourceDesc =
  
  ##  (description de la source) décrit la source à partir de laquelle un texte électronique a été
  ##     dérivé ou produit, habituellement une description bibliographique pour un texte numérisé, ou une
  ##     expression comme "document numérique natif " pour un texte qui n'a aucune existence précédente.
  element ns1:sourceDesc {
    (model.pLike+
     | (model.biblLike | model.sourceDescPart | model.listLike)+),
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
biblFull =
  
  ##  (référence bibliographique totalement structurée) contient une référence bibliographique totalement
  ##     structurée : tous les composants de la description du fichier TEI  y sont présents.
  element ns1:biblFull {
    ((titleStmt,
      editionStmt?,
      extent?,
      publicationStmt,
      seriesStmt?,
      notesStmt?),
     sourceDesc*),
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
encodingDesc =
  
  ##  (description de l'encodage) documente la relation d'un texte électronique avec sa ou ses sources.
  element ns1:encodingDesc {
    (model.encodingDescPart | model.pLike)+,
    att.global.attributes,
    empty
  }
projectDesc =
  
  ##  (description du projet)  décrit en détail le but ou l’objectif visé dans
  ##     l’encodage d’un fichier électronique, ainsi que toute autre information pertinente sur la
  ##     manière dont il a été construit ou recueilli.
  element ns1:projectDesc {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
samplingDecl =
  
  ##  (déclaration d'échantillonnage)  contient une description en texte libre du raisonnement
  ##     et des méthodes utilisés pour l'échantillonnage des textes dans la création d’un corpus ou
  ##     d’une collection.
  element ns1:samplingDecl {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
editorialDecl =
  
  ##  (déclaration des pratiques éditoriales) donne des précisions sur les pratiques et  les principes éditoriaux appliqués au cours de l’encodage du texte.
  element ns1:editorialDecl {
    (model.pLike | model.editorialDeclPart)+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
correction =
  
  ##  (règles de correction) établit comment et dans quelles circonstances des
  ##     corrections ont été apportées au texte.
  element ns1:correction {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    
    ## indique le degré de correction apporté au texte.
    [ a:defaultValue = "unknown" ]
    attribute status {
      
      ## le texte a été entièrement vérifié et corrigé.
      "high"
      | 
        ## le texte a au moins été vérifié une fois.
        "medium"
      | 
        ## le texte n’a pas été vérifié.
        "low"
      | 
        ## le niveau de correction du texte est inconnu.
        "unknown"
    }?,
    
    ## indique la méthode adoptée pour signaler les
    ##         corrections dans le texte.
    [ a:defaultValue = "silent" ]
    attribute method {
      
      ## les corrections ont été faites sans être
      ##             marquées.
      "silent"
      | 
        ## les corrections ont été notées par un codage
        "markup"
    }?,
    empty
  }
normalization =
  
  ##  (normalisation)  indique l'extension de la normalisation ou de la
  ##     régularisation effectuée sur le texte source dans sa conversion vers sa forme électronique. 
  element ns1:normalization {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    
    ## indique l’autorité pour toute normalisation
    ##         effectuée.
    attribute source { data.pointer }?,
    
    ## indique la méthode adoptée pour signaler les
    ##         normalisations dans le texte.
    [ a:defaultValue = "silent" ]
    attribute method {
      
      ## normalisation effectuée sans être mentionnée.
      "silent"
      | 
        ## la normalisation a été décrite en employant un
        ##             codage
        "markup"
    }?,
    empty
  }
quotation =
  
  ##  (citation) décrit la pratique éditoriale adoptée par rapport aux
  ##     guillements dans l’original.
  element ns1:quotation {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    
    ##  (guillemets) indique si les guillemets ont été retenus ou non
    ##         comme faisant partie du texte.
    [ a:defaultValue = "all" ]
    attribute marks {
      
      ## aucun guillemet n’a été retenu.
      "none"
      | 
        ## quelques guillemetsont été retenues.
        "some"
      | 
        ## tous les guillemets ont été conservés.
        "all"
    }?,
    
    ## précise comment les guillemets sont indiqués dans le
    ##         texte.
    [ a:defaultValue = "unknown" ] attribute form { text }?,
    empty
  }
hyphenation =
  
  ##  (césurage) résume la façon dont les traits d'union sécants de fin de
  ##     ligne d’un texte source ont été traités dans sa version encodée.
  element ns1:hyphenation {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    
    ##  (fin de ligne) indique si des traits d'union sécants de fin de ligne
    ##         ont été conservés ou non dans un texte.
    [ a:defaultValue = "some" ]
    attribute eol {
      
      ## tous les traits d'union sécants de fin de ligne ont été
      ##             conservés, même si la largeur des lignes de l’original peut ne pas l’avoir été.
      "all"
      | 
        ## des traits d'union sécants de fin de ligne ont été
        ##             conservés dans certains cas.
        "some"
      | 
        ## tous les traits d’union sécants générés par le césurage
        ##             en fin de ligne ont été supprimés : tout trait d’union sécant subsistant en fin de ligne doit
        ##             être conservé.
        "hard"
      | 
        ## tous les traits d’union sécants en fin de ligne ont été
        ##             supprimés : tout trait d’union sécant présent se trouvait à l’intérieur d’une ligne.
        "none"
    }?,
    empty
  }
segmentation =
  
  ##  (segmentation) décrit les principes selon lesquels le texte a été
  ##     segmenté, par exemple en phrases, en intonèmes (unités tonales), en strates graphématiques
  ##     (niveaux superposés de signes graphiques), etc.
  element ns1:segmentation {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
stdVals =
  
  ##  (valeurs normalisées) précise le format utilisé pour exprimer une date ou une
  ##     valeur numérique de manière normalisée .
  element ns1:stdVals {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
interpretation =
  
  ##  (Interprétation) décrit le champ d’application de toute information
  ##     analytique ou interprétative ajoutée à la transcription du texte.
  element ns1:interpretation {
    model.pLike+,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
tagsDecl =
  
  ##  (déclaration de balisage)  donne l’information détaillée sur le balisage appliqué à un document .
  element ns1:tagsDecl {
    (rendition*, \namespace*), att.global.attributes, empty
  }
tagUsage =
  
  ##  (usage des balises.) donne des informations sur l’utilisation d’un élément
  ##     spécifique dans un texte.
  element ns1:tagUsage {
    macro.limitedContent,
    att.global.attributes,
    
    ##  (nom de l'élément) nom (identifiant générique) de l’élément indiqué par
    ##         la balise.
    attribute gi { data.name },
    
    ## spécifie le nombre d’occurrences de cet élément dans
    ##         le texte.
    attribute occurs { data.count }?,
    
    ##  (avec identificateur unique) spécifie le nombre d’occurrences de cet élément dans
    ##         le texte qui porte une valeur donnée pour l’attribut global xml:id. 
    attribute withId { data.count }?,
    
    ## spécifie l’identifiant d’un élément 
    ##           rendition qui définit comment cet élément doit être restitué.
    attribute render { data.pointer }?,
    empty
  }
\namespace =
  
  ##  (espace de noms) fournit le nom formel de l'espace de noms auquel
  ##     appartiennent les éléments documentés par ses éléments fils. 
  element ns1:namespace {
    tagUsage+,
    att.global.attributes,
    
    ## le nom formel complet de l'espace de noms concerné.
    attribute name { data.namespace },
    empty
  }
rendition =
  
  ##  (rendu)  donne des informations sur le rendu ou sur l'apparence
  ##     d'un ou de plusieurs éléments dans le texte source.
  element ns1:rendition {
    macro.limitedContent,
    att.global.attributes,
    
    ## identifie la langue employée pour décrire le rendu
    attribute scheme {
      
      ## langage CSS (Cascading Stylesheet )
      "css"
      | 
        ## Langage XSL (Extensible Stylesheet )Formatting
        ##             Objects
        "xslfo"
      | 
        ## description en texte libre non structuré.
        "free"
      | 
        ## langue de description de l'interprétation définie
        ##             par l'utilisateur
        "other"
    }?,
    
    ## where CSS is used, provides a way of defining
    ## pseudo-elements, that is, styling rules
    ## applicable to specific sub-portions of an element.
    attribute scope { text }?,
    empty
  }
refsDecl =
  
  ##  (Déclaration du système de références) précise la manière dont les références canoniques ont été construites pour ce texte.
  element ns1:refsDecl {
    (model.pLike+ | cRefPattern+ | refState+),
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
cRefPattern =
  
  ##  (Modèle de référence canonique) spécifie un modèle d’expression et des règles de
  ##     remplacement pour transformer une référence canonique en URI.
  element ns1:cRefPattern {
    model.pLike*,
    att.global.attributes,
    
    ## spécifie une expression régulière à laquelle vont
    ##         être comparées les valeurs des attributs cRef. 
    attribute matchPattern { data.pattern },
    
    ## spécifie une règle de
    ##         remplacement qui, après avoir opéré les substitutions prévues à chaque nœud,
    ##         génère une URI.
    attribute replacementPattern { text },
    empty
  }
refState =
  
  ##  (état de la référence) spécifie un composant d’une référence canonique définie
  ##     par la méthode du bornage.
  element ns1:refState {
    empty,
    att.global.attributes,
    att.sourced.attributes,
    
    ## indique quel changement d'état survient au changement
    ##         de borne.
    ## Les valeurs suggérées comprennent: 1] page; 2] column; 3] line; 4] book; 5] poem; 6] canto; 7] stanza; 8] act; 9] scene; 10] section; 11] absent
    attribute unit {
      
      ## sauts de page dans l'édition de référence.
      "page"
      | 
        ## sauts de colonnes.
        "column"
      | 
        ## sauts de lignes.
        "line"
      | 
        ##  toute unité désignée sous le terme de livre,
        ##             liber, etc.
        "book"
      | 
        ## poésies extraites d'une collection.
        "poem"
      | 
        ## chants ou autres grandes parties dans une poésie.
        "canto"
      | 
        ## strophes dans une poésie, livre, ou chant.
        "stanza"
      | 
        ## actes dans une pièce.
        "act"
      | 
        ## scènes dans une pièce ou dans un acte
        "scene"
      | 
        ## sections de toute nature.
        "section"
      | 
        ## passages absents dans l'édition de référence
        "absent"
      | xsd:Name
    },
    
    ## spécifie la longueur fixe du composant de la
    ##         référence.
    attribute length { data.count }?,
    
    ##  (délimiteur) Fournit une suite de caractères de délimitation après
    ##         le composant de référence.
    attribute delim { text }?,
    empty
  }
classDecl =
  
  ##  (déclaration de classification) contient une ou plusieurs taxinomies définissant les codes de classification utilisés n’importe où dans le texte.
  element ns1:classDecl { taxonomy+, att.global.attributes, empty }
taxonomy =
  
  ##  (taxinomie) définit une typologie employée pour classer des textes
  ##     soit implicitement au moyen d’une référence bibliographique, soit explicitement au moyen d’une
  ##     taxinomie structurée.
  element ns1:taxonomy {
    (model.glossLike* | category+ | (model.biblLike, category*)),
    att.global.attributes,
    empty
  }
category =
  
  ##  (catégorie)  contient une catégorie descriptive particulière,
  ##     éventuellement intégrée dans une catégorie de niveau supérieur, à l’intérieur d’une taxinomie
  ##     définie par l’utilisateur.
  element ns1:category {
    ((catDesc+ | model.glossLike*), category*),
    att.global.attributes,
    empty
  }
catDesc =
  
  ##  (Description de la catégorie) décrit une catégorie particulière à l’intérieur d’une
  ##     taxinomie ou d’une typologie de texte, sous forme d’un court texte descriptif suivi ou dans les
  ##     termes des paramètres contextuels utilisés dans l’élément Description du texte
  ##     textDesc. 
  element ns1:catDesc {
    (text | model.limitedPhrase | model.catDescPart)*,
    att.global.attributes,
    empty
  }
appInfo =
  
  ##  (informations d'application) enregistre des informations sur l'application qui a
  ## été utilisée pour traiter le fichier TEI.
  element ns1:appInfo {
    model.applicationLike+, att.global.attributes, empty
  }
application =
  
  ## fournit des informations sur une application qui a été
  ##     utilisée pour le traitement du document.
  element ns1:application {
    (model.labelLike+, (model.ptrLike* | model.pLike*)),
    att.global.attributes,
    att.typed.attributes,
    att.datable.attributes,
    
    ## fournit un identifiant pour l'application,
    ##         indépendamment de son numéro de version ou du nom affiché.
    attribute ident { data.name },
    
    ## fournit un numéro de version pour l'application,
    ##         indépendamment de son identifiant ou du nom affiché.
    attribute version {
      xsd:token {
        pattern = "[\d]+[a-z]*[\d]*(\.[\d]+[a-z]*[\d]*){0,3}"
      }
    },
    empty
  }
profileDesc =
  
  ##  (description du profil)  fournit une description détaillée des aspects
  ##     non-bibliographiques du texte, notamment les langues utilisées et leurs variantes, les
  ##     circonstances de sa production, les collaborateurs et leur statut.
  element ns1:profileDesc {
    model.profileDescPart*, att.global.attributes, empty
  }
handNote =
  
  ##  (note sur une main) décrit un style d'écriture ou une main qui sont reconnus
  ##     dans un manuscrit.
  element ns1:handNote {
    macro.specialPara,
    att.global.attributes,
    att.handFeatures.attributes,
    empty
  }
creation =
  
  ##  (création) contient des informations concernant la création d’un
  ##     texte.
  element ns1:creation {
    macro.phraseSeq.limited, att.global.attributes, empty
  }
langUsage =
  
  ##  (langue utilisée)  décrit les langues, variétés de
  ## langues, registres, dialectes, etc. présents à l’intérieur d’un texte.
  element ns1:langUsage {
    language+, att.global.attributes, att.declarable.attributes, empty
  }
language =
  
  ##  (langue) caractérise une langue ou une variété de langue utilisée
  ##     dans un texte.
  element ns1:language {
    macro.phraseSeq.limited,
    att.global.attributes,
    
    ##  (identificateur) fournit un code de langue issu de la recommandation
    ##         RFC 3066 RFC 3066 (ou son
    ##         successeur) utilisé pour identifier la langue précisée par cet élément, référencé par
    ##         l’attribut global xml:lang s’appliquant à l’élément considéré.
    attribute ident { data.language },
    
    ## précise approximativement le pourcentage du volume de
    ##         texte utilisant cette langue.
    attribute usage {
      xsd:nonNegativeInteger { maxInclusive = "100" }
    }?,
    empty
  }
textClass =
  
  ##  (classification du texte) regroupe des informations décrivant la nature ou le sujet
  ##     d’un texte selon des termes issus d’un système de classification standardisé, d’un thésaurus,
  ##     etc.
  element ns1:textClass {
    (classCode | catRef | keywords)*,
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
keywords =
  
  ##  (mot-clé) contient une liste de mots-clés ou d’expressions
  ##     décrivant la nature ou le sujet d’un texte.
  element ns1:keywords {
    (term+ | \list),
    att.global.attributes,
    
    ## désigne la liste close de mots dans lequel l'ensemble
    ##         des mots-clés concernés est défini. 
    attribute scheme { data.pointer },
    empty
  }
classCode =
  
  ##  (code de classification) contient le code de classification attribué à ce texte en
  ##     référence à un système standard de classification.
  element ns1:classCode {
    macro.phraseSeq.limited,
    att.global.attributes,
    
    ## identifie le système de classification ou la
    ##         taxinomie utilisée.
    attribute scheme { data.pointer },
    empty
  }
catRef =
  
  ##  (Référence à la catégorie) spécifie une ou plusieurs catégories définies dans une
  ##     taxinomie ou une typologie textuelle.
  element ns1:catRef {
    empty,
    att.global.attributes,
    att.pointing.attributes,
    
    ## identifie le schéma de classification dans lequel est
    ##         défini le jeu de catégories concerné.
    attribute scheme { data.pointer }?,
    empty
  }
revisionDesc =
  
  ##  (descriptif des révisions)  fournit un résumé de l’historique des révisions d’un
  ##     fichier.
  element ns1:revisionDesc {
    (\list | change+),
    att.global.attributes,
    att.docStatus.attributes,
    empty
  }
change =
  
  ##  (changement) résume une modification ou une correction apportée à une
  ##     version particulière d’un texte électronique partagé entre plusieurs chercheurs.
  element ns1:change {
    (text | model.limitedPhrase | model.inter | model.global)*,
    att.global.attributes,
    att.ascribed.attributes,
    att.datable.attributes,
    att.docStatus.attributes,
    empty
  }
typeNote =
  
  ##  (note sur les caractères typographiques.) décrit une police particulière ou un autre trait
  ##     typographique significatif que l’on note dans la description d'une ressource imprimée. 
  element ns1:typeNote {
    macro.specialPara,
    att.global.attributes,
    att.handFeatures.attributes,
    empty
  }
scriptNote =
  
  ## describes a particular script distinguished within
  ##     the description of a manuscript or similar resource.
  element ns1:scriptNote {
    macro.specialPara,
    att.global.attributes,
    att.handFeatures.attributes,
    empty
  }
geoDecl =
  
  ##  (déclaration de coordonnées géographiques.) documente la notation et les données utilisées pour
  ##     exprimer les coordonnées géographiques dans l'élément geo ailleurs dans le document.
  element ns1:geoDecl {
    macro.phraseSeq,
    att.global.attributes,
    att.declarable.attributes,
    
    ## donne un nom de code d'usage général pour les données
    ##         employées.
    ## Les valeurs suggérées comprennent: 1] WGS84 (Système Géodésique Mondial) ; 2] MGRS (Système de Référence du Réseau Militaire,
    ##             (MGRS).) ; 3] OSGB36 (Système de coordonnées de Grande-Bretagne (OSGB) ) ; 4] ED50 (système de coordonnées de données européen.) 
    [ a:defaultValue = "WGS84" ]
    attribute datum {
      
      ##  (Système Géodésique Mondial)  couple de nombres destinés à être interprétés
      ##             comme la latitude suivie de la longitude selon le Système Géodésique Mondial.
      "WGS84"
      | 
        ##  (Système de Référence du Réseau Militaire,
        ##             (MGRS).)  Les valeurs fournies sont des codes objet
        ##             d'entités geospatiales, fondées sur les coordonnées de la grille de projection
        ##             transversale universelle de Mercator, (UTM).
        "MGRS"
      | 
        ##  (Système de coordonnées de Grande-Bretagne (OSGB) ) la valeur fournie est à interpréter selon le
        ##             système "British national grid reference".
        "OSGB36"
      | 
        ##  (système de coordonnées de données européen.)  La valeur fournie doit être interprétée comme la
        ##             latitude suivie de la longitude selon le système de coordonnées de données européen.
        "ED50"
      | xsd:Name
    }?,
    empty
  }
link =
  
  ##  ( lien) définit une association ou un lien hypertextuel entre des éléments ou des passages, lien dont le type ne peut être spécifié précisément par d'autres éléments.
  element ns1:link {
    empty
    >> sch:pattern [
         id = "link-constraint-linkTargets1"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:link"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @targets"
             "You may not supply both \x{a}" ~
             "	@target and @targets"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "link-constraint-linkTargets2"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:link"
           "\x{a}" ~
           "               "
           sch:report [
             test = "not(@target) and not(@targets)"
             "You must\x{a}" ~
             "	supply either @target or @targets"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "link-constraint-linkTargets3"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:link"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "contains(@target,' ')"
             "You must supply at least two\x{a}" ~
             "values for @target"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.pointing.attributes,
    att.typed.attributes,
    
    ## spécifie les identifiants des éléments ou des passages à lier ou à associer.
    attribute targets {
      list { data.pointer, data.pointer, data.pointer* }
    }?,
    empty
  }
linkGrp =
  
  ##  (groupe de liens) définit un ensemble d'associations ou de liens hypertextuels.
  element ns1:linkGrp {
    (link | ptr)+,
    att.global.attributes,
    att.pointing.group.attributes,
    empty
  }
ab =
  
  ##  (bloc anonyme) contient une unité de texte quelconque, de niveau "composant", faisant office de contenant anonyme pour une expression ou des éléments de niveau intermédiaire, analogue à un paragraphe mais sans sa portée sémantique.
  element ns1:ab {
    macro.paraContent,
    att.global.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    
    ## spécifie si le bloc est complet ou non.
    [ a:defaultValue = "N" ]
    attribute part {
      
      ##  (oui) le bloc est incomplet.
      "Y"
      | 
        ##  (non) soit le bloc est complet, soit il n'est fait aucune référence à sa complétude.
        "N"
      | 
        ##  (initial) la partie initiale d'un bloc incomplet.
        "I"
      | 
        ##  (médian) la partie médiane d'un bloc incomplet.
        "M"
      | 
        ##  (final) la partie finale d'un bloc incomplet.
        "F"
    }?,
    empty
  }
anchor =
  
  ##  (point d'ancrage) attache un identifiant à un point du texte, que ce point corresponde ou non à un élément textuel.
  element ns1:anchor {
    empty, att.global.attributes, att.typed.attributes, empty
  }
seg =
  
  ##  (segment quelconque) contient une unité de texte quelconque de niveau segment.
  element ns1:seg {
    macro.paraContent,
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    att.responsibility.attributes,
    empty
  }
when =
  
  ## indique un point dans le temps, soit relatif à d'autres éléments de l'élément timeline dans lequel il est contenu, soit dans l'absolu.
  element ns1:when {
    empty,
    att.global.attributes,
    
    ## contient une valeur temporelle absolue.
    attribute absolute { data.temporal.w3c }?,
    
    ## spécifie l'unité de temps dans laquelle la valeur de l'attribut interval est exprimée, si elle n'est pas héritée de l'élément parent timeLine.
    ## Les valeurs suggérées comprennent: 1] d (jours) ; 2] h (heures) ; 3] min(minutes) ; 4] s (secondes) ; 5] ms (millisecondes) 
    attribute unit {
      
      ##  (jours) 
      "d"
      | 
        ##  (heures) 
        "h"
      | 
        ## (minutes) 
        "min"
      | 
        ##  (secondes) 
        "s"
      | 
        ##  (millisecondes) 
        "ms"
      | xsd:Name
    }?,
    
    ## spécifie la partie numérique d'un intervalle de temps.
    attribute interval {
      xsd:float { minExclusive = "0" }
      | "unknown"
    }?,
    
    ## identifie le point de référence pour déterminer la date ou l'heure de l'élément courant when : cette date ou cette heure s'obtiennent en ajoutant la valeur de l'intervalle à la date du point de référence.
    attribute since { data.pointer }?,
    empty
  }
timeline =
  
  ##  (frise chronologique) fournit un ensemble de points ordonnés dans le temps qui peuvent être liés à des éléments de la parole transcrite pour créer un alignement temporel de ce texte.
  element ns1:timeline {
    when+,
    att.global.attributes,
    
    ## désigne le début de la frise chronologique, c'est-à-dire le moment où elle commence.
    attribute origin { data.pointer }?,
    
    ## spécifie l'unité de temps correspondant à la valeur de l'attribut interval de la frise chronologique ou des points temporels qui la constituent.
    ## Les valeurs suggérées comprennent: 1] d (jours) ; 2] h (heures) ; 3] min(minutes) ; 4] s (secondes) ; 5] ms (millisecondes) 
    attribute unit {
      
      ##  (jours) 
      "d"
      | 
        ##  (heures) 
        "h"
      | 
        ## (minutes) 
        "min"
      | 
        ##  (secondes) 
        "s"
      | 
        ##  (millisecondes) 
        "ms"
      | xsd:Name
    }?,
    
    ## spécifie la partie numérique d'un intervalle de temps.
    attribute interval {
      xsd:float { minExclusive = "0" }
      | "regular"
      | "irregular"
    }?,
    empty
  }
join =
  
  ##  (jointure) identifie un segment de texte, qui peut être fragmenté, en pointant vers les éléments éventuellement dispersés qui le composent.
  element ns1:join {
    (model.glossLike*)
    >> sch:pattern [
         id = "join-constraint-joinTargets1"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:join"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @targets"
             "You may not supply both \x{a}" ~
             "	@target and @targets"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "join-constraint-joinTargets2"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:join"
           "\x{a}" ~
           "               "
           sch:report [
             test = "not(@target) and not(@targets)"
             "You must\x{a}" ~
             "	supply either @target or @targets"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "join-constraint-joinTargets3"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:join"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "contains(@target,' ')"
             "You must supply at least two\x{a}" ~
             "values for @target"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.pointing.attributes,
    att.typed.attributes,
    
    ## spécifie les identifiants des éléments ou des passages qui doivent être réunis dans un élément virtuel.
    attribute targets {
      list { data.pointer, data.pointer, data.pointer* }
    }?,
    
    ## spécifie le nom de l'élément que cette agrégation est censée former.
    attribute result { data.name }?,
    
    ## indique si les cibles à réunir incluent l'intégralité de l'élément indiqué (le sous-arbre entier y compris sa racine) ou seulement les enfants de la cible (les branches du sous-arbre).
    [ a:defaultValue = "root" ]
    attribute scope {
      
      ## les sous-arbres dotés de leur racine qui sont désignés par l'attribut targets sont joints ; chaque sous-arbre devient un fils de l'élément virtuel créé par la jointure. 
      "root"
      | 
        ## les fils des sous-arbres désignés par l'attribut targets deviennent les fils de l'élément virtuel (c'est-à-dire que les racines des sous-arbres disparaissent).
        "branches"
    }?,
    empty
  }
joinGrp =
  
  ##  (groupe de jointures) regroupe une collection d'éléments join ainsi que, éventuellement, des pointeurs.
  element ns1:joinGrp {
    (model.glossLike*, (join | ptr)+),
    att.global.attributes,
    att.pointing.group.attributes,
    
    ## décrit le résultat produit par le rassemblement dans cette collection des éléments join. 
    attribute result { data.name }?,
    empty
  }
alt =
  
  ##  (alternative) identifie une alternative ou un ensemble d'options
  ##         entre des éléments ou des passages.
  element ns1:alt {
    empty
    >> sch:pattern [
         id = "alt-constraint-altTargets1"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:alt"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @targets"
             "You may not supply both \x{a}" ~
             "	@target and @targets"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "alt-constraint-altTargets2"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:alt"
           "\x{a}" ~
           "               "
           sch:report [
             test = "not(@target) and not(@targets)"
             "You must\x{a}" ~
             "	supply either @target or @targets"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "alt-constraint-altTargets3"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:alt"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "contains(@target,' ')"
             "You must supply at least two\x{a}" ~
             "values for @target"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.pointing.attributes,
    att.typed.attributes,
    
    ## spécifie les identifiants des éléments ou des
    ##                 passages alternatifs.
    attribute targets {
      list { data.pointer, data.pointer, data.pointer* }
    }?,
    
    ## établit si les alternatives rassemblées dans
    ##                 cette collection sont exclusives ou non.
    attribute mode {
      
      ##  (exclusif) indique que l'alternative est
      ##                         exclusive, c'est-à-dire, qu'une seule des options proposées est possible.
      "excl"
      | 
        ##  (non exclusif) Indique que cette alternative n'est pas
        ##                         exclusive, c'est-à-dire qu'une option au moins est vraie.
        "incl"
    }?,
    
    ## Si l'attribut mode a la valeur
    ##                     , chacune des valeurs de l'attribut weights établit
    ##                 la probabilité que l'option correspondante soit vraie. Si l'attribut mode
    ##                 a la valeur , chacune des valeurs de l'attribut weights
    ##                 établit la probabilité que l'option correspondante soit vraie, étant posé qu'au
    ##                 moins une des autres options l'est aussi.
    attribute weights {
      list { data.probability, data.probability, data.probability* }
    }?,
    empty
  }
altGrp =
  
  ##  (groupe d'alternatives) regroupe une collection d'éléments alt et,
  ##         éventuellement, de pointeurs.
  element ns1:altGrp {
    (alt | ptr)*,
    att.global.attributes,
    att.pointing.group.attributes,
    
    ## établit si les alternatives rassemblées dans
    ##                 cette collection sont exclusives ou non.
    [ a:defaultValue = "excl" ]
    attribute mode {
      
      ##  (exclusif) indique que l'alternative est
      ##                         exclusive, c'est-à-dire qu'une seule des alternatives proposées est
      ##                         possible.
      "excl"
      | 
        ##  (non exclusif) indique que l'alternative n'est pas
        ##                         exclusive, c'est-à-dire qu'une alternative au moins est vraie.
        "incl"
    }?,
    empty
  }
att.global.linking.attributes =
  att.global.linking.attribute.corresp,
  att.global.linking.attribute.synch,
  att.global.linking.attribute.sameAs,
  att.global.linking.attribute.copyOf,
  att.global.linking.attribute.next,
  att.global.linking.attribute.prev,
  att.global.linking.attribute.exclude,
  att.global.linking.attribute.select
att.global.linking.attribute.corresp =
  
  ##  (correspond) pointe vers des éléments qui ont une
  ##           correspondance avec l'élément en question.
  attribute corresp {
    list { data.pointer, data.pointer* }
  }?
att.global.linking.attribute.synch =
  
  ##  (synchrone) pointe vers des éléments qui sont synchrones avec l'élément en question.
  attribute synch {
    list { data.pointer, data.pointer* }
  }?
att.global.linking.attribute.sameAs =
  
  ## pointe vers un élément identique à l'élément en question.
  attribute sameAs { data.pointer }?
att.global.linking.attribute.copyOf =
  
  ## pointe vers un élément dont l'élément en question
  ##           est une copie.
  attribute copyOf { data.pointer }?
att.global.linking.attribute.next =
  
  ## pointe vers l'élément suivant d'un ensemble
  ##           virtuel dont l'élément en question est une partie.
  attribute next { data.pointer }?
att.global.linking.attribute.prev =
  
  ##  ( précédent) pointe vers l'élément précédent d'un ensemble
  ##           virtuel auquel appartient l'élément en question.
  attribute prev { data.pointer }?
att.global.linking.attribute.exclude =
  
  ## pointe vers des éléments qui sont une alternative
  ##           exclusive à l'élément en question.
  attribute exclude {
    list { data.pointer, data.pointer* }
  }?
att.global.linking.attribute.select =
  
  ## sélectionne une ou plusieurs valeurs alternatives
  ##           ; si une seule valeur est sélectionnée, l'ambiguïté ou l'incertitude est marquée comme
  ##           résolue. Si plus d'une valeur alternative est sélectionnée, le degré d'ambiguïté ou
  ##           d'incertitude est marqué comme réduit par le nombre de valeurs alternatives non
  ##           sélectionnées.
  attribute select {
    list { data.pointer, data.pointer* }
  }?
msDesc =
  
  ##  (description d'un manuscrit) contient la description d'un manuscrit bien
  ##       individualisé
  element ns1:msDesc {
    (msIdentifier,
     model.headLike*,
     (model.pLike+
      | (msContents?, physDesc?, history?, additional?, msPart*))),
    att.global.attributes,
    empty
  }
catchwords =
  
  ##  (réclames) décrit le système utilisé pour s'assurer que les
  ##       cahiers formant un manuscrit ou un incunable sont dans le bon ordre, typiquement au moyen
  ##       d'annotations en bas de page.
  element ns1:catchwords {
    macro.phraseSeq, att.global.attributes, empty
  }
dimensions =
  
  ##  (dimensions) contient une spécification des dimensions.
  element ns1:dimensions {
    ((dim | model.dimLike)*)
    >> sch:pattern [
         id = "dimensions-constraint-duplicateDim1"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:dimensions"
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:width)> 1"
             "\x{a}" ~
             "	Width element may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "dimensions-constraint-duplicateDim2"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:dimensions"
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:height)> 1"
             "\x{a}" ~
             "	Height element may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "dimensions-constraint-duplicateDim3"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:dimensions"
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:depth)> 1"
             "\x{a}" ~
             "	Depth element may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.dimensions.attributes,
    
    ## indique quel aspect de l'objet est mesuré.
    ## Exemple de valeurs possibles: 1] leaves; 2] ruled; 3] pricked; 4] written; 5] miniatures; 6] binding; 7] box
    attribute type { data.enumerated }?,
    empty
  }
dim =
  
  ## contains any single measurement forming part of a dimensional
  ## specification of some sort.
  element ns1:dim {
    macro.xtext,
    att.global.attributes,
    att.typed.attributes,
    att.dimensions.attributes,
    empty
  }
height =
  
  ##  (hauteur) contient une dimension prise sur l'axe parallèle au
  ##       dos du manuscrit.
  element ns1:height {
    macro.xtext, att.global.attributes, att.dimensions.attributes, empty
  }
depth =
  
  ##  (épaisseur) contient une dimension mesurée sur le dos du
  ##       manuscrit.
  element ns1:depth {
    macro.xtext, att.global.attributes, att.dimensions.attributes, empty
  }
width =
  
  ##  (largeur) contient une dimension mesurée sur l'axe
  ##       perpendiculaire au dos du manuscrit.
  element ns1:width {
    macro.xtext, att.global.attributes, att.dimensions.attributes, empty
  }
heraldry =
  
  ##  (héraldique) contient une devise ou une formule d'héraldique,
  ##       comme celles qu'on trouve sur un blason, des armoiries, etc.
  element ns1:heraldry { macro.phraseSeq, att.global.attributes, empty }
locus =
  
  ##  (locus) définit un emplacement au sein d'un manuscrit ou d'une
  ##     partie de manuscrit, souvent une séquence, éventuellement discontinue, de références de
  ##     feuillets.
  element ns1:locus {
    macro.xtext,
    att.global.attributes,
    att.pointing.attributes,
    
    ##  (système) désigne le système de foliotation utilisé pour
    ##         localiser la subdivision du manuscrit qui est en cours de description.
    attribute scheme { data.pointer }?,
    
    ##  (depuis) Spécifie, sous une forme normalisée, le point de
    ##         départ de la localisation.
    attribute from { data.word }?,
    
    ##  (jusqu'à) Spécifie, sous une forme normalisée, la borne de fin
    ##         pour la localisation.
    attribute to { data.word }?,
    empty
  }
locusGrp =
  
  ##  (groupe d'emplacements) 
  ##     regroupe un certain nombre d'emplacements qui forment ensemble un item identifiable bien que discontinu dans un manuscrit ou une partie de manuscrit selon une foliotation spécifique.
  ##   
  element ns1:locusGrp {
    locus+,
    att.global.attributes,
    
    ##  (système) désigne le système de foliotation selon lequel les emplacements contenus dans le groupe sont définis.
    attribute scheme { data.pointer }?,
    empty
  }
material =
  
  ##  (matériau) Contient un mot ou une expression décrivant le ou les matériau(x)
  ##       utilisé(s) pour fabriquer un manuscrit (ou une partie d'un manuscrit).
  element ns1:material {
    macro.phraseSeq,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
objectType =
  
  ##  (type d'objet) contient un mot ou une expression qui décrit le type de l'objet consideré.
  ##    
  element ns1:objectType {
    macro.phraseSeq,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
origDate =
  
  ##  (date de la création) Contient une date, dans une forme libre, utilisée
  ##       pour dater la création d'un manuscrit ou d'une partie d'un manuscrit.
  element ns1:origDate {
    (text | model.gLike | model.phrase | model.global)*,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
origPlace =
  
  ##  (lieu de création) Contient un nom de lieu, dans une forme libre,
  ##       utilisé pour désigner l'endroit où a été produit un manuscrit ou une partie d'un
  ##     manuscrit.
  element ns1:origPlace {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    empty
  }
secFol =
  
  ##  (deuxième folio) Le mot ou les mots repris d'un point précisément
  ##       connu d'un codex (comme le début du second feuillet) pour identifier celui-ci de façon
  ##       univoque.
  element ns1:secFol { macro.phraseSeq, att.global.attributes, empty }
signatures =
  
  ##  (signatures) Contient une étude des signatures trouvées sur un
  ##       feuillet ou sur un cahier dans un manuscrit.
  element ns1:signatures {
    macro.phraseSeq, att.global.attributes, empty
  }
stamp =
  
  ##  (cachet) Contient un mot ou une expression décrivant un cachet ou
  ##       une marque du même genre.
  element ns1:stamp {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
watermark =
  
  ##  (filigrane) Contient un mot ou une expression décrivant un filigrane
  ##       ou une marque du même genre.
  element ns1:watermark {
    macro.phraseSeq, att.global.attributes, empty
  }
msIdentifier =
  
  ##  (identifiant du manuscrit) Contient les informations requises pour identifier le
  ##       manuscrit en cours de description.
  element ns1:msIdentifier {
    ((model.placeNamePart_sequenceOptional,
      institution?,
      repository?,
      collection*,
      idno?),
     (msName | altIdentifier)*)
    >> sch:pattern [
         id = "msIdentifier-constraint-msId_minimal"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:msIdentifier"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "local-name(*[1])='idno' or                              local-name(*[1])='altIdentifier' or        .='' "
             "\x{a}" ~
             "	    You must supply either a locator of some type or a\x{a}" ~
             "	    name"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    empty
  }
institution =
  
  ##  (institution) Contient le nom d'un organisme (comme une université
  ##       ou une bibliothèque), avec lequel un manuscrit est identifié ; en général c'est le nom de
  ##       l'institution qui conserve ce manuscrit.
  element ns1:institution {
    macro.xtext, att.global.attributes, att.naming.attributes, empty
  }
repository =
  
  ##  (lieu de conservation) Contient le nom d'un dépôt dans lequel des manuscrits
  ##       sont entreposés, et qui peut faire partie d'une institution.
  element ns1:repository {
    macro.xtext, att.global.attributes, att.naming.attributes, empty
  }
collection =
  
  ##  (collection) Contient le nom d'une collection de manuscrits,
  ##       ceux-ci ne se trouvant pas nécessairement dans le même lieu de conservation.
  element ns1:collection {
    macro.xtext,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
altIdentifier =
  
  ##  (autre identifiant) Contient un autre ou un ancien identifiant pour un
  ##       manuscrit, par exemple un numéro anciennement utilisé dans un catalogue.
  element ns1:altIdentifier {
    (model.placeNamePart_sequenceOptional,
     institution?,
     repository?,
     collection?,
     idno,
     note?),
    att.global.attributes,
    att.typed.attributes,
    empty
  }
msName =
  
  ##  (autre nom) contient un autre nom, dans une forme libre, utilisé pour désigner le manuscrit, tel qu'un surnom ou un ocellus nominum.
  element ns1:msName {
    macro.xtext, att.global.attributes, att.typed.attributes, empty
  }
colophon =
  
  ##  (colophon) contient le colophon d'une section d'un
  ##       manuscrit, c'est-à-dire la transcription des informations relatives à la date, au lieu, à
  ##       l'organisme commanditaire ou aux raisons de la production du manuscrit.
  element ns1:colophon { macro.phraseSeq, att.global.attributes, empty }
explicit =
  
  ##  (explicit) contient l'explicit d'une section d'un
  ##       manuscrit, c'est-à-dire les mots terminant le texte proprement dit, à l'exclusion de toute
  ##       rubrique ou colophon qui pourraient le suivre.
  element ns1:explicit {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.msExcerpt.attributes,
    empty
  }
filiation =
  
  ##  (filiation) contient les informations sur la
  ##       filiation du manuscrit, c'est-à-dire sur ses relations avec d'autres manuscrits
  ##       connus du même texte, ses protographes, antigraphes et
  ##         apographes.
  element ns1:filiation {
    macro.specialPara,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
finalRubric =
  
  ##  (rubrique de fin) Contient les derniers mots d'une section de texte,
  ##       qui incluent souvent la mention de son auteur et de son titre, et sont généralement
  ##       différenciés du texte lui-même par l'utilisation d'une encre rouge, par une taille ou un style
  ##       d'écriture particuliers, ou par tout autre moyen visuel.
  element ns1:finalRubric {
    macro.phraseSeq, att.global.attributes, att.typed.attributes, empty
  }
incipit =
  
  ## contient l'incipit d'une section d'un
  ##       manuscrit, c'est-à-dire les mots commençant le texte proprement dit, à l'exclusion de toute
  ##         rubrique qui pourrait les précéder, la transcription étant de longueur
  ##       suffisante pour permettre l'identification de l'œuvre. De tels incipit étaient autrefois
  ##       souvent utilisés à la place du titre de l'œuvre, pour l'identifier.
  element ns1:incipit {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attributes,
    att.msExcerpt.attributes,
    empty
  }
msContents =
  
  ##  (contenu du manuscrit) décrit le contenu intellectuel d'un manuscrit ou d'une
  ##     partie d'un manuscrit, soit en une série de paragraphes p, soit sous la forme d'une
  ##     série d'éléments structurés msItem concernant les items du manuscrit.
  element ns1:msContents {
    (model.pLike+
     | (summary?, textLang?, titlePage?, (msItem | msItemStruct)*)),
    att.global.attributes,
    att.msExcerpt.attributes,
    
    ##  (classe) spécifie la ou les catégories ou classes auxquelles
    ##         le manuscrit appartient.
    attribute class { data.code }?,
    empty
  }
msItem =
  
  ##  (item de manuscrit) décrit une œuvre ou un item individualisés dans le
  ##       contenu intellectuel d'un manuscrit ou d'une partie de manuscrit.
  element ns1:msItem {
    ((locus | locusGrp)*,
     (model.pLike+
      | (model.titlepagePart | model.msItemPart | model.global)+)),
    att.global.attributes,
    att.msExcerpt.attributes,
    
    ##  (classe) spécifie la ou les catégories ou classes
    ##           auxquelles l'item appartient.
    attribute class { data.code }?,
    empty
  }
msItemStruct =
  
  ##  (description structurée d'un item de manuscrit) contient la description structurée d'un item ou d'une
  ##       œuvre, dans le contenu intellectuel d'un manuscrit ou d'une partie d'un manuscrit.
  element ns1:msItemStruct {
    (locus?,
     (model.pLike+
      | (author*,
         respStmt*,
         title*,
         rubric?,
         incipit?,
         msItemStruct*,
         explicit?,
         finalRubric?,
         colophon*,
         decoNote*,
         listBibl*,
         bibl*,
         filiation*,
         model.noteLike*,
         textLang?))),
    att.global.attributes,
    att.msExcerpt.attributes,
    
    ##  (classe) spécifie la ou les catégories ou classes
    ##           auxquelles l'item appartient.
    attribute class { data.code }?,
    empty
  }
rubric =
  
  ##  (rubrique) contient le texte d'une rubrique ou d'un
  ##       intitulé propres à un item, c'est-à-dire des mots qui signalent le début du texte, qui
  ##       incluent souvent la mention de son auteur et de son titre, et qui sont différenciés du texte
  ##       lui-même, généralement à l'encre rouge, par une taille ou un style d'écriture particuliers, ou
  ##       par tout autre procédé de ce genre.
  element ns1:rubric {
    macro.phraseSeq, att.global.attributes, att.typed.attributes, empty
  }
summary =
  
  ## contains an overview of the available
  ##   information concerning some aspect of an item (for example, its
  ## intellectual content, history, layout, typography etc.) as a
  ## complement or alternative to the  more detailed information  carried by
  ##   more specific elements.
  element ns1:summary { macro.phraseSeq, att.global.attributes, empty }
textLang =
  
  ##  (langues du texte) décrit les langues et systèmes d'écriture utilisés dans
  ##     un manuscrit (et non dans la description du manuscrit, dont les langues et systèmes d'écriture
  ##     sont décrits dans l'élément langUsage).
  element ns1:textLang {
    macro.phraseSeq,
    att.global.attributes,
    
    ##  (langue principale) contient un code identifiant la langue principale du
    ##         manuscrit.
    attribute mainLang { data.language }?,
    
    ##  (autres langues) contient un ou plusieurs codes identifiant toute
    ##         autre langue utilisée dans le manuscrit.
    attribute otherLangs {
      list { data.language* }
    }?,
    empty
  }
att.msExcerpt.attributes = att.msExcerpt.attribute.defective
att.msExcerpt.attribute.defective =
  
  ## indique si le passage décrit est fautif, i.e. incomplet en raison d'une lacune ou d'une détérioration.
  [ a:defaultValue = "false" ] attribute defective { data.xTruthValue }?
physDesc =
  
  ##  (description physique) contient la description physique complète d'un
  ##       manuscrit ou d'une partie d'un manuscrit, éventuellement structurée en utilisant les éléments
  ##       plus spécialisés appartenant à la classe model.physDescPart.
  element ns1:physDesc {
    (model.pLike*, model.physDescPart_sequenceOptional),
    att.global.attributes,
    empty
  }
objectDesc =
  
  ##  (description d'objet) contient la description des composants matériels de
  ##       l'objet en cours de traitement
  element ns1:objectDesc {
    (model.pLike+ | (supportDesc?, layoutDesc?)),
    att.global.attributes,
    
    ##  (forme) contient un nom abrégé spécifique au projet,
    ##           désignant la forme physique du support, par exemple : codex, rouleau, fragment, fragment
    ##           de feuillet, découpe, etc.
    attribute form { data.enumerated }?,
    empty
  }
supportDesc =
  
  ##  (description du support) Regroupe les éléments décrivant le support physique
  ##       du texte du manuscrit.
  element ns1:supportDesc {
    (model.pLike+
     | (support?, extent?, foliation*, collation?, condition?)),
    att.global.attributes,
    
    ##  (matériau) contient un nom abrégé propre au projet désignant
    ##           le matériau qui a principalement servi pour fabriquer le support.
    ## Les valeurs suggérées comprennent: 1] paper (paper) ; 2] parch (parchemin) ; 3] mixed
    attribute material {
      
      ##  (paper) 
      "paper"
      | 
        ##  (parchemin) 
        "parch"
      | 
        ##
        "mixed"
      | xsd:Name
    }?,
    empty
  }
support =
  
  ##  (support) contient la description des matériaux, techniques,
  ##       etc., qui ont servi à fabriquer le support physique du texte du manuscrit.
  element ns1:support {
    macro.specialPara, att.global.attributes, empty
  }
collation =
  
  ##  (collation) contient la description de l'organisation des
  ##       feuillets ou bifeuillets d'un manuscrit
  element ns1:collation {
    macro.specialPara, att.global.attributes, empty
  }
foliation =
  
  ##  (foliotation) décrit le ou les systèmes de numérotation des
  ##       feuillets ou pages d'un codex
  element ns1:foliation {
    macro.specialPara, att.global.attributes, empty
  }
condition =
  
  ##  (état matériel) contient la description de l'état matériel du
  ##       manuscrit.
  element ns1:condition {
    macro.specialPara, att.global.attributes, empty
  }
layoutDesc =
  
  ##  (description de la mise en page) rassemble les descriptions des mises en page d' un
  ##       manuscrit.
  element ns1:layoutDesc {
    (model.pLike+ | (summary?, layout+)),
    att.global.attributes,
    empty
  }
layout =
  
  ##  (mise en page) décrit comment le texte est disposé sur la page, ce
  ##       qui inclut les informations sur d'éventuels systèmes de réglure, de piqûre ou d'autres
  ##       techniques de préparation de la page.
  element ns1:layout {
    macro.specialPara,
    att.global.attributes,
    
    ##  (colonnes) spécifie le nombre de colonnes présentes sur une
    ##           page
    attribute columns {
      list { data.count, data.count? }
    }?,
    
    ##  (lignes de réglure) spécifie le nombre de lignes de réglure présentes
    ##           par colonne
    attribute ruledLines {
      list { data.count, data.count? }
    }?,
    
    ##  (lignes d'écriture) spécifie le nombre de lignes écrites par colonne
    attribute writtenLines {
      list { data.count, data.count? }
    }?,
    empty
  }
handDesc =
  
  ##  (description des écritures) contient la description des différents types
  ##       d'écriture utilisés dans un manuscrit.
  element ns1:handDesc {
    (model.pLike+ | (summary?, handNote+)),
    att.global.attributes,
    
    ##  (mains) spécifie le nombre de mains différentes qui ont
    ##           pu être identifiées dans le manuscrit
    attribute hands { data.count }?,
    empty
  }
typeDesc =
  
  ##  (description des styles de caractère) contient la description des styles de caractères ou d'autres aspects de l'impression d'un incunable ou d'une autre source imprimée.
  element ns1:typeDesc {
    (model.pLike+ | (summary?, typeNote+)),
    att.global.attributes,
    empty
  }
scriptDesc =
  
  ## contains a description of the scripts used in a manuscript or similar source.
  element ns1:scriptDesc {
    (model.pLike+ | (summary?, scriptNote+)),
    att.global.attributes,
    empty
  }
musicNotation =
  
  ##  (notation musicale) contient la description d'un type de notation
  ##       musicale.
  element ns1:musicNotation {
    macro.specialPara, att.global.attributes, empty
  }
decoDesc =
  
  ##  (description de la décoration) contient la description de la décoration du
  ##       manuscrit, soit en une série de paragraphes p, soit sous la forme d'une série
  ##       d'éléments thématiques decoNote
  ##    
  element ns1:decoDesc {
    (model.pLike+ | (summary?, decoNote+)),
    att.global.attributes,
    empty
  }
decoNote =
  
  ##  (note sur un élément de décoration) contient une note décrivant soit un élément de
  ##       décoration du mansucrit, soit une catégorie relativement homogène de tels éléments.
  element ns1:decoNote {
    macro.specialPara,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
additions =
  
  ##  (ajouts) contient la description des ajouts significatifs
  ##       trouvés dans un manuscrit, tels que gloses marginales ou autres annotations.
  element ns1:additions {
    macro.specialPara, att.global.attributes, empty
  }
bindingDesc =
  
  ##  (description de la reliure) décrit les reliures actuelles et anciennes d'un
  ##       manuscrit, soit en une série de paragraphes p, soit sous la forme d'une série
  ##       d'éléments binding, un pour chaque reliure
  element ns1:bindingDesc {
    ((model.pLike | decoNote | condition)+ | binding+),
    att.global.attributes,
    empty
  }
binding =
  
  ##  (reliure) contient la description d'une reliure, i.e. du type de
  ##     couverture, d'ais, etc., rencontrés.
  element ns1:binding {
    (model.pLike | condition | decoNote)+,
    att.global.attributes,
    att.datable.attributes,
    
    ##  (contemporaine) spécifie si la reliure est contemporaine ou non de
    ##         l'essentiel du contenu du manuscrit.
    attribute contemporary { data.xTruthValue }?,
    empty
  }
sealDesc =
  
  ##  (description des sceaux) décrit les sceaux ou autres objets attachés au
  ##       manuscrit, soit en une série de paragraphes p, soit sous la forme d'une série
  ##       d'éléments seal, complétés éventuellement par des éléments decoNote.
  element ns1:sealDesc {
    (model.pLike+ | (decoNote | seal | condition)+),
    att.global.attributes,
    empty
  }
seal =
  
  ##  (sceau) contient la description d'un sceau ou d'un objet
  ##       similaire, attaché au manuscrit.
  element ns1:seal {
    (model.pLike | decoNote)+,
    att.global.attributes,
    att.typed.attributes,
    att.datable.attributes,
    
    ##  (contemporain) spécifie si le sceau est ou non contemporain du
    ##           manuscrit auquel il est attaché.
    attribute contemporary { data.xTruthValue }?,
    empty
  }
accMat =
  
  ##  (matériel d'accompagnement) donne des détails sur tout matériel d'accompagnement
  ##       étroitement associé au manuscrit, tel que documents non contemporains ou fragments reliés avec
  ##       le manuscrit à une époque antérieure.
  element ns1:accMat {
    macro.specialPara,
    att.global.attributes,
    att.typed.attributes,
    empty
  }
history =
  
  ##  (histoire) rassemble les éléments servant à donner un historique
  ##       complet du manuscrit ou d'une partie du manuscrit.
  element ns1:history {
    (model.pLike+ | (summary?, origin?, provenance*, acquisition?)),
    att.global.attributes,
    empty
  }
origin =
  
  ##  (origine) contient des informations sur l'origine du manuscrit
  ##       ou de la partie de manuscrit.
  element ns1:origin {
    macro.specialPara,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    empty
  }
provenance =
  
  ##  (provenance) contient des informations sur un épisode précis de
  ##       l'histoire du manuscrit ou de la partie du manuscrit, après sa création et avant son
  ##       acquisition
  element ns1:provenance {
    macro.specialPara,
    att.global.attributes,
    att.datable.attributes,
    empty
  }
acquisition =
  
  ##  (acquisition) contient des informations sur les modalités et
  ##       circonstances de l'entrée du manuscrit ou de la partie du manuscrit dans l'institution qui le
  ##       détient
  element ns1:acquisition {
    macro.specialPara,
    att.global.attributes,
    att.datable.attributes,
    empty
  }
additional =
  
  ##  (informations complémentaires) regroupe les informations complémentaires sur le
  ##       manuscrit, incluant une bibliographie, des indications sur ses reproductions, ou des
  ##       informations sur sa conservation et sur sa gestion
  element ns1:additional {
    (adminInfo?, surrogates?, listBibl?), att.global.attributes, empty
  }
adminInfo =
  
  ##  (informations administratives) contient, pour le manuscrit en cours de description, les informations sur son détenteur actuel, sur ses conditions d'accès et sur les modalités de sa description.
  element ns1:adminInfo {
    (recordHist?, availability?, custodialHist?, model.noteLike?),
    att.global.attributes,
    empty
  }
recordHist =
  
  ##  (histoire de la description) donne des informations sur la source de la
  ##       description et sur les modifications apportées à la description précédente.
  element ns1:recordHist {
    (model.pLike+ | (source, change*)),
    att.global.attributes,
    empty
  }
source =
  
  ##  (source) décrit la source des informations contenues dans la
  ##       description du manuscrit.
  element ns1:source { macro.specialPara, att.global.attributes, empty }
custodialHist =
  
  ##  (histoire de la conservation) contient des informations sur l'histoire de la
  ##       conservation, soit en texte libre, soit sous la forme d'une série d'éléments
  ##       custEvent.
  element ns1:custodialHist {
    (model.pLike+ | custEvent+), att.global.attributes, empty
  }
custEvent =
  
  ##  (événement dans la conservation) décrit un événement dans l'histoire de la
  ##       conservation du manuscrit.
  element ns1:custEvent {
    macro.specialPara,
    att.global.attributes,
    att.datable.attributes,
    att.typed.attributes,
    empty
  }
surrogates =
  
  ##  (reproductions) contient des informations sur toute reproduction
  ##       numérique ou photographique du manuscrit en cours de description, qu'elle soit détenue par
  ##       l'institution de conservation ou ailleurs.
  element ns1:surrogates {
    macro.specialPara, att.global.attributes, empty
  }
msPart =
  
  ##  (partie d'un manuscrit) contient des informations sur un manuscrit distinct à
  ##       l'origine, ou sur une partie d'un manuscrit, qui constitue actuellement une section d'un
  ##       manuscrit composite.
  element ns1:msPart {
    (altIdentifier,
     model.headLike*,
     (model.pLike+
      | (msContents?, physDesc?, history?, additional?, msPart*))),
    att.global.attributes,
    empty
  }
model.persNamePart =
  surname | forename | genName | nameLink | addName | roleName
model.persNamePart_alternation =
  surname | forename | genName | nameLink | addName | roleName
model.persNamePart_sequence =
  surname, forename, genName, nameLink, addName, roleName
model.persNamePart_sequenceOptional =
  surname?, forename?, genName?, nameLink?, addName?, roleName?
model.persNamePart_sequenceOptionalRepeatable =
  surname*, forename*, genName*, nameLink*, addName*, roleName*
model.persNamePart_sequenceRepeatable =
  surname+, forename+, genName+, nameLink+, addName+, roleName+
orgName =
  
  ##  (nom d'organisation) contient le nom d'une organisation.
  element ns1:orgName {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
persName =
  
  ##  (nom de personne) contient un nom propre ou une expression nominale se
  ##     référant à une personne, pouvant inclure tout ou partie de ses prénoms, noms de famille, titres
  ##     honorifiques, noms ajoutés, etc.
  element ns1:persName {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
surname =
  
  ##  (nom de famille) contient un nom de famille (hérité) par opposition à un nom donné, nom de baptême ou surnom.
  element ns1:surname {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
forename =
  
  ##  (prénom) contient un prénom, qu'il soit donné ou un nom de baptême.
  element ns1:forename {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
genName =
  
  ##  (qualificatif générationnel de nom) contient une composante de nom utilisée pour distinguer des noms, par ailleurs similaires, sur la base de
  ##         l'âge ou de la génération des personnes concernées.
  element ns1:genName {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
nameLink =
  
  ##  (lien entre les composants d'un nom) contient une particule ou une expression exprimant un lien, utilisés dans un nom mais considérés comme
  ##         n'en faisant pas partie, comme "van der" ou "de".
  element ns1:nameLink {
    macro.phraseSeq, att.global.attributes, att.typed.attributes, empty
  }
addName =
  
  ##  (nom additionnel) contient une composante de nom additionnelle, comme un surnom, une épithète, un alias ou toute autre
  ##     expression descriptive utilisée dans un nom de personne.
  element ns1:addName {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
roleName =
  
  ##  (rôle) contient un composant du nom d'une personne, indiquant que celle-ci a un rôle ou une position
  ##         particulière dans la société, comme un titre ou un rang officiel.
  element ns1:roleName {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
placeName =
  
  ##  (nom de lieu) contient un nom de lieu absolu ou relatif.
  element ns1:placeName {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    empty
  }
bloc =
  
  ##  (bloc) contient le nom d'une unité géo-politique composée d'au
  ##     moins deux états ou pays
  element ns1:bloc {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
country =
  
  ##  (pays) contient le nom d'une unité géo-politique, comme une
  ##     nation, un pays, une colonie ou une communauté, plus grande ou administrativement supérieure à
  ##     une région et plus petite qu'un bloc.
  element ns1:country {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
region =
  
  ##  (région) contient le nom d'une unité administrative comme un état,
  ##     une province ou un comté, plus grande qu'un lieu de peuplement, mais plus petite qu'un pays.
  element ns1:region {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
district =
  
  ##  (district) contient le nom d'une subdivision quelconque d'une ville, comme une paroisse, une circonscription
  ##         électorale ou toute autre unité administrative ou géographique.
  element ns1:district {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
settlement =
  
  ##  (lieu de peuplement) contient le nom d'un lieu de peuplement comme une cité, une ville ou un village, identifié comme une
  ##         unité géo-politique ou administrative unique.
  element ns1:settlement {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
offset =
  
  ##  (distance relative) la partie d'une expression temporelle ou spatiale qui indique la distance et/ou la direction entre les
  ##         deux lieux, dates ou heures sur lesquels porte l'expression.
  element ns1:offset {
    macro.xtext, att.global.attributes, att.typed.attributes, empty
  }
geogName =
  
  ##  (nom de lieu géographique) un nom associé à une caractéristique géographique comme Windrush Valley ou le Mont Sinaï.
  element ns1:geogName {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    
    ## fournit des informations plus culturelles, linguistiques ou spécifiques à l'application,
    ##                 utilisées pour classer cette composante du nom.
    attribute type { data.enumerated }?,
    empty
  }
geogFeat =
  
  ##  (nom de caractéristique géographique) contient un nom commun identifiant une caractéristique
  ##         géographique contenue dans un nom de lieu, comme vallée, mont, etc.
  element ns1:geogFeat {
    macro.xtext,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
affiliation =
  
  ##  (affiliation) contient une description non formalisée portant sur
  ##         l'affiliation présente ou passée d'une personne à une organisation, par exemple un employeur
  ##         ou un sponsor.
  element ns1:affiliation {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.naming.attributes,
    empty
  }
age =
  
  ##  (âge) précise l'âge d'une personne
  element ns1:age {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    
    ## fournit un code numérique représentant l'âge ou la
    ##         tranche d'âge.
    attribute value { data.count }?,
    empty
  }
birth =
  
  ##  (naissance) contient des informations sur la naissance d'une
  ##     personne, comme la date et le lieu
  element ns1:birth {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.naming.attributes,
    empty
  }
climate =
  
  ##  (climat) contient des informations sur le climat physique d'un
  ##         lieu.
  element ns1:climate {
    (model.headLike*,
     (model.pLike+ | model.labelLike+),
     (model.noteLike | model.biblLike)*,
     climate*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
death =
  
  ##  (décès) contient des informations sur le décès d'une personne, comme la date et le lieu.
  element ns1:death {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.naming.attributes,
    empty
  }
education =
  
  ##  (éducation) contient la description du parcours scolaire d'une personne.
  element ns1:education {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.naming.attributes,
    empty
  }
event =
  
  ##  (évènement) contient des données liées à tout type d'évènement significatif dans l'existence d'une personne, d'un
  ##         lieu ou d'une organisation.
  element ns1:event {
    (model.headLike*,
     (model.pLike+ | model.labelLike+),
     (model.noteLike | model.biblLike)*,
     event*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    att.naming.attributes,
    
    ## indique la localisation d'un évènement en pointant vers un élément place
    ##             
    attribute where { data.pointer }?,
    empty
  }
faith =
  
  ##  (religion) précise la foi, la religion ou les croyances d'une personne.
  element ns1:faith {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    empty
  }
floruit =
  
  ##  (période d'activité) contient des informations sur la période d'activité d'une personne.
  element ns1:floruit {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    empty
  }
geo =
  
  ##  (coordonnées géographiques) contient toute expression, dans un système de notation, d'un ensemble de coordonnées géographiques
  ##         représentant un point, une ligne ou une zone sur la surface de la Terre.
  element ns1:geo { text, att.global.attributes, empty }
langKnowledge =
  
  ##  (connaissances linguistiques) synthétise l'état des connaissances linguistiques d'une personne, soit en texte libre soit par une liste
  ##         d'éléments langKnown. 
  element ns1:langKnowledge {
    (model.pLike | langKnown+),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    
    ## fournit un ou plusieurs codes de langue valides pour les langues spécifiées.
    attribute tags {
      list { data.language, data.language* }
    }?,
    empty
  }
langKnown =
  
  ##  (compétence linguistique) synthétise l'état des connaissances d'une personne relativement à une langue particulière.
  element ns1:langKnown {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    
    ## fournit un code de langue valide pour la langue concernée.
    attribute tag { data.language },
    
    ## un code indiquant le niveau de connaissance qu'une personne a de cette langue.
    attribute level { data.word }?,
    empty
  }
listOrg =
  
  ##  (liste d'organisations) contient une liste d'éléments, chacun d'eux fournissant
  ##         des informations sur une organisation identifiable.
  element ns1:listOrg {
    (model.headLike*, (org | listOrg)+, (relationGrp | relation)*),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    empty
  }
listEvent =
  
  ##  (liste d'événements) contient une liste de descriptions, chacune d'entre elles fournissant des informations sur un événement connu.
  element ns1:listEvent {
    (model.headLike*, (event | listEvent)+, (relation | relationGrp)*),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    empty
  }
listPerson =
  
  ##  (liste de personnes) contient une liste d'éléments, chacun d'entre eux
  ##     apportant des informations sur une personne précise ou sur un groupe de personnes, par exemple
  ##     les participants à une interaction linguistique, ou les personnes citées dans une source
  ##     historique.
  element ns1:listPerson {
    (model.headLike*,
     (model.personLike | listPerson)+,
     (relation | relationGrp)*),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    empty
  }
listPlace =
  
  ##  (liste de lieux) contient une liste de lieux, qui peut être suivie d'une
  ##         liste de relations définies entre les lieux (autres que la relation d'inclusion).
  element ns1:listPlace {
    (model.headLike*,
     (model.placeLike | listPlace)+,
     (relationGrp | relation)*),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    empty
  }
location =
  
  ##  (localisation) définit l'emplacement d'un lieu par des coordonnées géographiques, en termes d'entités nommées dites
  ##         géopolitiques, ou par une adresse.
  element ns1:location {
    (model.labelLike
     | model.placeNamePart
     | model.offsetLike
     | model.measureLike
     | model.addressLike
     | model.noteLike
     | model.biblLike)*,
    att.global.attributes,
    att.typed.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    empty
  }
nationality =
  
  ##  (nationalité) contient une description non formalisée de la nationalité ou citoyenneté présente ou passée d'une
  ##         personne.
  element ns1:nationality {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    empty
  }
occupation =
  
  ##  (activité) contient une description non formalisée de l'activité, de la profession ou de l'occupation d'une
  ##         personne.
  element ns1:occupation {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    
    ## identifie le système de classification ou la taxinomie utilisés, en fournissant l'identifiant
    ##                 d'un élément taxonomy déclaré ailleurs dans l'en-tête.
    attribute scheme { data.pointer }?,
    
    ## contient un code d'activité défini dans le système de classification ou dans la taxonomie déclaré
    ##                 dans l'attribut scheme.
    attribute code { data.pointer }?,
    empty
  }
org =
  
  ##  (organisation) fournit des informations sur une organisation
  ##         identifiable, telle qu'une entreprise, une tribu ou tout autre groupement de personnes.
  element ns1:org {
    (model.headLike*,
     (model.pLike*
      | (model.labelLike | model.nameLike | model.placeLike)*),
     (model.noteLike | model.biblLike)*,
     model.personLike*),
    att.global.attributes,
    att.typed.attributes,
    att.editLike.attributes,
    
    ## spécifie le rôle principal ou la catégorie
    ##                 d'une organisation.
    attribute role {
      list { data.word, data.word* }
    }?,
    empty
  }
relationGrp =
  
  ##  (groupe de relations) donne des informations sur les relations qui existent
  ##     entre des personnes, des lieux, ou des organisations, soit de manière informelle en prose, soit
  ##     de manière formelle.
  element ns1:relationGrp {
    (model.pLike+ | relation+),
    att.global.attributes,
    att.typed.attributes,
    empty
  }
person =
  
  ##  (personne) fournit des informations sur un individu identifiable, par exemple un participant à une interaction
  ##         linguistique, ou une personne citée dans une source historique.
  element ns1:person {
    (model.pLike+ | (model.personPart | model.global)*),
    att.global.attributes,
    att.editLike.attributes,
    
    ## précise un rôle principal ou une classification principale pour cette personne.
    attribute role {
      list { data.enumerated, data.enumerated* }
    }?,
    
    ## précise le sexe de la personne.
    attribute sex { data.sex }?,
    
    ## précise une tranche d'âge pour la personne.
    attribute age { data.enumerated }?,
    empty
  }
personGrp =
  
  ##  (groupe de personnes) décrit un groupe d'individus traité comme une personne unique à des fins d'analyse.
  element ns1:personGrp {
    (model.pLike+ | model.personPart*),
    att.global.attributes,
    
    ## précise le rôle joué par ce groupe de personnes dans l'interaction.
    attribute role { data.enumerated }?,
    
    ## précise le sexe du groupe participant.
    attribute sex { data.sex | "mixed" }?,
    
    ## précise la tranche d'âge des participants.
    attribute age { data.enumerated }?,
    
    ## précise la taille exacte ou approximative du groupe.
    attribute size {
      list { data.word, data.word* }
    }?,
    empty
  }
place =
  
  ##  (lieu) contient des informations sur un lieu géographique.
  element ns1:place {
    (model.headLike*,
     (model.pLike*
      | (model.labelLike
         | model.placeStateLike
         | model.placeTraitLike
         | model.placeEventLike)*),
     (model.noteLike | model.biblLike)*,
     (model.placeLike | listPlace)*),
    att.global.attributes,
    att.typed.attributes,
    att.editLike.attributes,
    empty
  }
population =
  
  ##  (population) contient des informations sur la population d'un lieu.contient des informations sur la population d'un lieu.
  element ns1:population {
    (model.headLike*,
     ((model.pLike+ | model.labelLike+),
      (model.noteLike | model.biblLike)*)?,
     population*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
relation =
  
  ##  (relation) décrit tout type de relation ou de lien à l'intérieur d'un groupe donné de participants.
  element ns1:relation {
    (desc?)
    >> sch:pattern [
         id = "relation-constraint-activemutual"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relation"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@active and @mutual"
             "Only one of the attributes\x{a}" ~
             "	'active' and 'mutual' may be supplied"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "relation-constraint-activepassive"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relation"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@passive and not(@active)"
             "the attribute 'passive'\x{a}" ~
             "	may be supplied only if the attribute 'active' is\x{a}" ~
             "	supplied"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    
    ## caractérise la relation sous un certain aspect, par exemple social, personnel ou autre.
    ## Les valeurs suggérées comprennent: 1] social; 2] personal; 3] other
    [ a:defaultValue = "personal" ]
    attribute type {
      
      ## forme de relation sociale.
      "social"
      | 
        ## forme de relation personnelle, comme parenté, mariage, etc.
        "personal"
      | 
        ## autres formes de relation.
        "other"
      | xsd:Name
    }?,
    
    ## fournit un nom pour le type de relation dont elle est une instance.
    attribute name { data.enumerated },
    
    ## identifie les participants passifs dans une relation non mutuelle.
    attribute passive {
      list { data.pointer, data.pointer* }
    }?,
    (
     ## identifie les participants actifs dans une relation à sens unique, ou tous les participants
     ##                     dans une relation réciproque.
     attribute active {
       list { data.pointer, data.pointer* }
     }?
     | 
       ## fournit une liste de participants entre lesquels la relation est réciproque.
       attribute mutual {
         list { data.pointer, data.pointer* }
       }?),
    empty
  }
residence =
  
  ##  (résidence) décrit les lieux de résidence présents ou passés d'une personne.
  element ns1:residence {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    empty
  }
sex =
  
  ##  (sexe) précise le sexe d'une personne.
  element ns1:sex {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    
    ##
    attribute value { data.sex }?,
    empty
  }
socecStatus =
  
  ##  (statut socio-économique) contient une description non formalisée du statut social ou économique d'une personne.
  element ns1:socecStatus {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    
    ## identifie le système de classification ou la taxinomie utilisés.
    attribute scheme { data.pointer }?,
    
    ## contient un code de statut existant dans le système de classification ou dans la taxonomie
    ##                 déclarés au moyen de l'attribut source.
    attribute code { data.pointer }?,
    empty
  }
state =
  
  ##  (statut) contient la description d'un statut ou d'une qualité actuels attribués à une personne, un lieu ou une
  ##         organisation.
  element ns1:state {
    (state+
     | (model.headLike*,
        model.pLike+,
        (model.noteLike | model.biblLike)*)
     | (model.labelLike | model.noteLike | model.biblLike)*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    att.naming.attributes,
    empty
  }
terrain =
  
  ##  (terrain) contient des informations sur le terrain physique d'un lieu.
  element ns1:terrain {
    (model.headLike*,
     (model.pLike+ | model.labelLike+),
     (model.noteLike | model.biblLike)*,
     terrain*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
trait =
  
  ##  (trait distinctif) contient la description d'une caractéristique culturelle et en principe permanente, attribuée à une
  ##         personne ou à un lieu.
  element ns1:trait {
    (trait+
     | (model.headLike*,
        model.pLike+,
        (model.noteLike | model.biblLike)*)
     | (model.labelLike | model.noteLike | model.biblLike)*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
nym =
  
  ##  (nom canonique) contient la définition de tout nom ou partie de nom dans leur forme canonique.
  element ns1:nym {
    (model.entryPart*, model.pLike*, nym*),
    att.global.attributes,
    att.typed.attributes,
    
    ## pointe vers des éléments constituants canoniques.
    attribute parts {
      list {
        data.pointer,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?,
        data.pointer?
      }
    }?,
    empty
  }
listNym =
  
  ##  (liste de noms canoniques) contient une liste de noms normalisés pour tous types d'objets.
  element ns1:listNym {
    (model.headLike*, (nym | listNym)+, (relationGrp | relation)*),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    empty
  }
att.datable.iso.attributes =
  att.datable.iso.attribute.when-iso,
  att.datable.iso.attribute.notBefore-iso,
  att.datable.iso.attribute.notAfter-iso,
  att.datable.iso.attribute.from-iso,
  att.datable.iso.attribute.to-iso
att.datable.iso.attribute.when-iso =
  
  ## précise une date exacte pour l'évènement selon la forme normalisée ISO 8601, c'est-à-dire
  ##                 aaaa-mm-jj.
  attribute when-iso { data.temporal.iso }?
att.datable.iso.attribute.notBefore-iso =
  
  ## précise la première date possible pour l'évènement selon la forme normalisée, c'est-à-dire
  ##                 aaaa-mm-jj.
  attribute notBefore-iso { data.temporal.iso }?
att.datable.iso.attribute.notAfter-iso =
  
  ## précise la dernière date possible pour l'évènement selon la forme normalisée, c'est-à-dire
  ##                 aaaa-mm-jj.
  attribute notAfter-iso { data.temporal.iso }?
att.datable.iso.attribute.from-iso =
  
  ## Indique le point de départ de la période sous une forme normalisée
  attribute from-iso { data.temporal.iso }?
att.datable.iso.attribute.to-iso =
  
  ## Indique le point final de la période sous une forme normalisée
  attribute to-iso { data.temporal.iso }?
model.rdgLike = rdg
app =
  
  ##  (entrée d'apparat critique) contient une entrée dans un apparat critique,
  ##			constituée d'un lemme facultatif et d'au moins une leçon.
  element ns1:app {
    (model.global*,
     (lem, model.global*, (wit, model.global*)?)?,
     ((model.rdgLike, model.global*, (wit, model.global*)?)
      | (rdgGrp, model.global*, (wit, model.global*)?))*)
    >> sch:pattern [
         id = "app-constraint-only1lem"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:app"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "count( descendant::tei:lem[ generate-id(       current() ) = generate-id( ancestor::tei:app[1] ) ]) <       2"
             "Only one <lem> element may appear within a single\x{a}" ~
             "      apparatus entry, whether it appears outside a <rdgGrp>\x{a}" ~
             "      element or within it."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    
    ## classifie la variation contenue dans cet
    ##					élément selon toute typologie adéquate.
    attribute type { data.enumerated }?,
    
    ## identifie, si nécessaire, le début du
    ##					lemme dans le texte de base.
    attribute from { data.pointer }?,
    
    ## identifie, si nécessaire, la fin du lemme
    ##					dans le texte de base.
    attribute to { data.pointer }?,
    
    ##  (emplacement) indique la localisation de la variante
    ##					lorsqu'on utilise dans l'encodage de l'apparat critique une méthode de
    ##					référencement des localisations.
    attribute loc {
      list { data.word, data.word* }
    }?,
    empty
  }
lem =
  
  ##  (lemme) contient le lemme ou le texte de base d'une
  ##			variante textuelle
  element ns1:lem {
    (text
     | model.gLike
     | model.phrase
     | model.inter
     | model.global
     | model.rdgPart)*,
    att.global.attributes,
    att.textCritical.attributes,
    empty
  }
rdg =
  
  ##  (leçon) contient une leçon à l'intérieur d'une variante
  ##			du texte.
  element ns1:rdg {
    (text
     | model.gLike
     | model.phrase
     | model.inter
     | model.global
     | model.rdgPart)*,
    att.global.attributes,
    att.textCritical.attributes,
    empty
  }
rdgGrp =
  
  ##  (groupe de leçons) regroupe deux leçons ou plus qui sont perçues
  ##			comme ayant une relation génétique ou une autre affinité.
  element ns1:rdgGrp {
    ((rdgGrp, wit?)
     | ((lem, wit?)?, (model.rdgLike, wit?))*)+,
    att.global.attributes,
    att.textCritical.attributes,
    empty
  }
witDetail =
  
  ##  (informations détaillées sur le témoin) donne des renseignements supplémentaires sur un
  ##			témoin particulier ou sur des témoins, pour une leçon particulière.
  element ns1:witDetail {
    macro.phraseSeq,
    att.global.attributes,
    att.placement.attributes,
    att.responsibility.attributes,
    att.pointing.attributes,
    
    ##  (témoins) contient le ou les code(s)				identifiant le ou le(s) témoin(s) auxquels fait référence l'élément
    ##						witDetail.
    attribute wit {
      list { data.pointer, data.pointer* }
    },
    
    ## décrit le type de renseignement donné sur
    ##					le témoin.
    attribute type { data.enumerated }?,
    empty
  }
wit =
  
  ##  (témoin) contient une liste d'une ou plusieurs
  ##			abréviation(s) désignant des témoins attestant d'une leçon donnée, pour une version du
  ##			texte.
  element ns1:wit {
    macro.phraseSeq,
    att.global.attributes,
    att.rdgPart.attributes,
    empty
  }
listWit =
  
  ##  (liste de témoins) donne une liste de définitions pour tous les
  ## témoignages cités dans un apparat critique, pouvant être groupées de façon hiérarchique.
  element ns1:listWit {
    (model.headLike?, (witness | listWit)+),
    att.global.attributes,
    empty
  }
witness =
  
  ##  (témoin) contient soit la description d'un seul témoin
  ##			auquel il est fait référence à l'intérieur de l'apparat critique, soit une liste de
  ##			témoins, à laquelle on doit faire référence par une seule abréviation
  element ns1:witness {
    macro.limitedContent, att.global.attributes, empty
  }
witStart =
  
  ##  (début d'un témoin fragmentaire) indique le début, ou la reprise du texte, d'un
  ##			témoin fragmentaire
  element ns1:witStart {
    empty, att.global.attributes, att.rdgPart.attributes, empty
  }
witEnd =
  
  ##  (fin d'un témoin fragmentaire) indique la fin ou l'arrêt du texte d'un témoin
  ##			fragmentaire
  element ns1:witEnd {
    empty, att.global.attributes, att.rdgPart.attributes, empty
  }
lacunaStart =
  
  ##  (début d'une lacune) indique le début d'une lacune dans le texte d'un
  ##			témoin textuel quasiment complet.
  element ns1:lacunaStart {
    empty, att.global.attributes, att.rdgPart.attributes, empty
  }
lacunaEnd =
  
  ##  (fin d'une lacune) indique la fin d'une lacune dans le texte d'un
  ##			témoin textuel quasiment complet
  element ns1:lacunaEnd {
    empty, att.global.attributes, att.rdgPart.attributes, empty
  }
variantEncoding =
  
  ##  (Méthode d'encodage des variantes) sert à déclarer la méthode utilisée pour encoder les variantes critiques du texte.
  element ns1:variantEncoding {
    empty,
    att.global.attributes,
    
    ## indique quelle méthode est utilisée pour encoder des variantes dans l’apparat critique.
    attribute method {
      
      ## l’apparat critique se réfère aux numéros de ligne ou à tout autre schéma de référence canonique contenu dans le texte de base.
      "location-referenced"
      | 
        ## l’apparat critique indique la localisation précise du début et de la fin de chaque lemme dans le texte de base.
        "double-end-point"
      | 
        ## différentes leçons d’un passage sont données en parallèle dans le texte ; la notion de texte de base n’est pas nécessaire.
        "parallel-segmentation"
    },
    
    ## indique si l’apparat critique est intérieur ou extérieur au texte.
    attribute location {
      
      ## l’apparat critique est intérieur au texte.
      "internal"
      | 
        ## l’apparat critique est extérieur au texte.
        "external"
    },
    empty
  }
model.rdgPart = wit | witStart | witEnd | lacunaStart | lacunaEnd
att.rdgPart.attributes = att.rdgPart.attribute.wit
att.rdgPart.attribute.wit =
  
  ##  (témoin ou témoins) contient une liste d'une ou plusieurs abréviations désignant les témoins qui commencent ou finissent à ce point.
  attribute wit {
    list { data.pointer, data.pointer* }
  }?
att.textCritical.attributes =
  att.responsibility.attributes,
  att.textCritical.attribute.wit,
  att.textCritical.attribute.type,
  att.textCritical.attribute.cause,
  att.textCritical.attribute.varSeq,
  att.textCritical.attribute.hand
att.textCritical.attribute.wit =
  
  ##  (témoin ou témoins) contient une liste comprenant un ou plusieurs pointeurs qui désignent
  ##					les témoins attestant d'une leçon donnée.
  attribute wit {
    list { data.pointer, data.pointer* }
  }?
att.textCritical.attribute.type =
  
  ## établit une classification de la leçon selon une typologie utile.
  ## Exemple de valeurs possibles: 1] substantive (substantif) ; 2] orthographic (orthographique) 
  attribute type { data.enumerated }?
att.textCritical.attribute.cause =
  
  ## établit une classification de la cause d'une variante de leçon, selon une typologie appropriée aux origines possibles de cette variation.
  ## Exemple de valeurs possibles: 1] homeoteleuton; 2] homeoarchy; 3] paleographicConfusion; 4] haplography; 5] dittography; 6] falseEmendation
  attribute cause { data.enumerated }?
att.textCritical.attribute.varSeq =
  
  ##  (position de la variante dans une séquence) fournit un nombre indiquant la position
  ##					de la leçon dans une séquence, lorsqu'on peut supposer un ordre pour les
  ##					variantes de chaque lemme.
  attribute varSeq { data.count }?
att.textCritical.attribute.hand =
  
  ## désigne la main responsable d'une leçon particulière dans le témoin.
  attribute hand { data.pointer }?
TEI =
  
  ##  (document TEI) contient un seul document conforme à la TEI, qui
  ##             comprend un en-tête TEI et un texte, soit de façon isolée soit comme  partie d’un
  ##             élément teiCorpus.
  element ns1:TEI {
    (teiHeader,
     ((model.resourceLike+, \text?) | \text))
    >> sch:ns [ prefix = "tei" uri = "http://www.tei-c.org/ns/1.0" ]
    >> sch:ns [
         prefix = "rng"
         uri = "http://relaxng.org/ns/structure/1.0"
       ],
    att.global.attributes,
    
    ## la version du schéma TEI
    attribute version { data.version }?,
    empty
  }
\text =
  
  ##  (texte) contient un seul texte quelconque, simple ou composite,
  ##     par exemple un poème ou une pièce de théâtre, un recueil d’essais, un roman, un dictionnaire ou
  ##     un échantillon de corpus.
  element ns1:text {
    (model.global*,
     (front, model.global*)?,
     (body | group),
     model.global*,
     (back, model.global*)?),
    att.global.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    empty
  }
body =
  
  ##  (corps du texte) contient la totalité du corps d’un seul texte simple, à
  ##     l’exclusion de toute partie pré- ou post-liminaire.
  element ns1:body {
    (model.global*,
     (model.divTop, (model.global | model.divTop)*)?,
     (model.divGenLike, (model.global | model.divGenLike)*)?,
     ((model.divLike, (model.global | model.divGenLike)*)+
      | (model.div1Like, (model.global | model.divGenLike)*)+
      | ((model.common, model.global*)+,
         ((model.divLike, (model.global | model.divGenLike)*)+
          | (model.div1Like, (model.global | model.divGenLike)*)+)?)),
     (model.divBottom, model.global*)*),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
group =
  
  ##  (groupe) contient le corps d’un texte composite qui regroupe une
  ##     suite de textes distincts (ou des groupes de textes de ce type), considérés comme formant une
  ##     unité dans un but quelconque, par exemple pour présenter les œuvres complètes d’un auteur, une
  ##     suite d’essais en prose, etc.
  element ns1:group {
    ((model.divTop | model.global)*,
     ((\text | group), (\text | group | model.global)*),
     model.divBottom*),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
floatingText =
  
  ##  (texte mobile) contient un texte quelconque, homogène ou composite, qui
  ##     interrompt le texte le contenant à n’importe quel endroit et après lequel le texte environnant
  ##     reprend.
  element ns1:floatingText {
    (model.global*,
     (front, model.global*)?,
     (body | group),
     model.global*,
     (back, model.global*)?),
    att.global.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    empty
  }
\div =
  
  ##  (division du texte) contient une subdivision dans le texte préliminaire, dans le
  ##     corps d’un texte ou dans le texte postliminaire.
  element ns1:div {
    ((model.divTop | model.global)*,
     ((((model.divLike | model.divGenLike), model.global*)+
       | ((model.common, model.global*)+,
          ((model.divLike | model.divGenLike), model.global*)*)),
      (model.divBottom, model.global*)*)?),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
div1 =
  
  ##  (division du texte de niveau 1) contient une subdivision de premier niveau dans
  ##     le texte préliminaire, dans le corps d’un texte ou dans le texte postliminaire. 
  element ns1:div1 {
    ((model.divTop | model.global)*,
     ((((model.div2Like | model.divGenLike), model.global*)+
       | ((model.common, model.global*)+,
          ((model.div2Like | model.divGenLike), model.global*)*)),
      (model.divBottom, model.global*)*)?),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
div2 =
  
  ##  (division du texte de niveau 2) contient une subdivision de deuxième niveau dans
  ##    le texte prélimaire, dans le corps d’un texte ou dans le texte postliminaire. 
  element ns1:div2 {
    ((model.divTop | model.global)*,
     ((((model.div3Like | model.divGenLike), model.global*)+
       | ((model.common, model.global*)+,
          ((model.div3Like | model.divGenLike), model.global*)*)),
      (model.divBottom, model.global*)*)?),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
div3 =
  
  ##  (division du texte de niveau 3) contient une subdivision de troisième niveau dans
  ##   le texte préliminaire, dans le corps d’un texte ou dans le texte postliminaire. 
  element ns1:div3 {
    ((model.divTop | model.global)*,
     ((((model.div4Like | model.divGenLike), model.global*)+
       | ((model.common, model.global*)+,
          ((model.div4Like | model.divGenLike), model.global*)*)),
      (model.divBottom, model.global*)*)?),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
div4 =
  
  ##  ( division du texte de niveau 4)  contient une subdivision de quatrième niveau dans
  ##   le texte préliminaire, dans le corps d’un texte ou dans le texte postliminaire. 
  element ns1:div4 {
    ((model.divTop | model.global)*,
     ((((model.div5Like | model.divGenLike), model.global*)+
       | ((model.common, model.global*)+,
          ((model.div5Like | model.divGenLike), model.global*)*)),
      (model.divBottom, model.global*)*)?),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
div5 =
  
  ##  ( division du texte de niveau 5)  contient une subdivision de cinquième niveau dans le
  ##     texte préliminaire, dans le corps d’un texte ou dans le texte postliminaire. 
  element ns1:div5 {
    ((model.divTop | model.global)*,
     ((((model.div6Like | model.divGenLike), model.global*)+
       | ((model.common, model.global*)+,
          ((model.div6Like | model.divGenLike), model.global*)*)),
      (model.divBottom, model.global*)*)?),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
div6 =
  
  ##  ( division du texte de niveau 6)  contient une subdivision de sixième niveau dans le texte
  ##     préliminaire, dans le corps d’un texte ou dans le texte postliminaire. 
  element ns1:div6 {
    ((model.divTop | model.global)*,
     ((((model.div7Like | model.divGenLike), model.global*)+
       | ((model.common, model.global*)+,
          ((model.div7Like | model.divGenLike), model.global*)*)),
      (model.divBottom, model.global*)*)?),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
div7 =
  
  ##  ( division du texte de niveau 7) contient la plus petite subdivision possible dans le
  ##     texte préliminaire, dans le corps d’un texte ou dans le texte postliminaire, plus grande
  ##     néanmoins qu’un paragraphe.
  element ns1:div7 {
    ((model.divTop | model.global)*,
     ((model.common, model.global*)+,
      (model.divBottom, model.global*)*)?),
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
trailer =
  
  ## contient un titre de fin ou de bas de page à la fin d’une
  ##     division du texte.
  element ns1:trailer { macro.phraseSeq, att.global.attributes, empty }
byline =
  
  ##  (mention de responsablité) contient la mention de responsabilité principale
  ##             pour une œuvre donnée sur la page de titre ou au début ou à la fin de
  ##         l’œuvre.
  element ns1:byline {
    (text | model.gLike | model.phrase | docAuthor | model.global)*,
    att.global.attributes,
    empty
  }
dateline =
  
  ##  (mention de date) contient une brève description des lieux, date, heure,
  ##     etc. concernant la production d’une lettre, d’un article de journal ou d’un autre texte qui,
  ##     placée au début ou à la fin, lui est associée comme en-tête ou annonce de fin.
  element ns1:dateline { macro.phraseSeq, att.global.attributes, empty }
argument =
  
  ##  (argument) liste formelle ou description en texte libre
  ##             des sujets traités dans une subdivision d’un texte
  element ns1:argument {
    ((model.global | model.headLike)*, (model.common, model.global*)+),
    att.global.attributes,
    empty
  }
epigraph =
  
  ## contient une citation, anonyme ou attribuée et qui apparaît au
  ##     début d’une section ou d’un chapitre ou sur une page de titre.
  element ns1:epigraph {
    (model.common | model.global)*, att.global.attributes, empty
  }
opener =
  
  ##  (formule de début) regroupe la date, la mention de responsabilité, la
  ##     formule de politesse et d'autres expressions de ce type dans un groupe préliminaire au début
  ##     d’une division, en particulier au commencement d’une lettre.
  element ns1:opener {
    (text
     | model.gLike
     | model.phrase
     | argument
     | byline
     | dateline
     | epigraph
     | salute
     | signed
     | model.global)*,
    att.global.attributes,
    empty
  }
closer =
  
  ##  (formule finale) regroupe une formule de politesse, une indication d'une
  ##     date et d'autres expressions semblables figurant comme expression à la fin d’une division, en
  ##     particulier à la fin d’une lettre.
  element ns1:closer {
    (text
     | model.gLike
     | signed
     | dateline
     | salute
     | model.phrase
     | model.global)*,
    att.global.attributes,
    empty
  }
salute =
  
  ##  (formule de politesse) contient une salutation, une formule de salut qui précède
  ##     un avant-propos, une épitre dédicatoire ou une autre division du texte ou la formule de
  ##     salutation qui conclut une lettre, une préface, etc.
  element ns1:salute { macro.phraseSeq, att.global.attributes, empty }
signed =
  
  ## (signature) contient la dernière salutation, etc., ajoutée à un avant-propos,
  ##     à une épitre dédicatoire ou à une autre division du texte.
  element ns1:signed { macro.phraseSeq, att.global.attributes, empty }
postscript =
  
  ## contient un de post-scriptum,  par exemple au bas d' une
  ## lettre.
  element ns1:postscript {
    (model.common | model.global)*, att.global.attributes, empty
  }
titlePage =
  
  ##  (page de titre) contient la page de titre d’un texte qui figure à dans
  ##     les parties liminaires.
  element ns1:titlePage {
    (model.global*,
     model.titlepagePart,
     (model.titlepagePart | model.global)*),
    att.global.attributes,
    
    ## classe la page de titre selon la typologie
    ##         appropriée.
    attribute type { data.enumerated }?,
    empty
  }
docTitle =
  
  ##  (titre du document) contient le titre d’un document, incluant la
  ##             totalité de ses composants tels qu’ils sont donnés sur la page de titre.
  element ns1:docTitle {
    (model.global*, (titlePart, model.global*)+),
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
titlePart =
  
  ## contient une section ou division du titre d’un
  ##             ouvrage telle qu’elle est indiquée sur la page de titre.
  element ns1:titlePart {
    macro.paraContent,
    att.global.attributes,
    
    ## précise le rôle de cette subdivision du
    ##                     titre.
    ## Les valeurs suggérées comprennent: 1] main; 2] sub (sous-titre de l’ouvrage.) ; 3] alt (titre alternatif de
    ##                         l’ouvrage.) ; 4] short; 5] desc (description paraphrastique de
    ##                             l’ouvrage.) 
    [ a:defaultValue = "main" ]
    attribute type {
      
      ## titre principal de l'oeuvre.
      "main"
      | 
        ##  (sous-titre de l’ouvrage.) sous-titre de l'oeuvre.
        "sub"
      | 
        ##  (titre alternatif de
        ##                         l’ouvrage.) autre titre de l'oeuvre.
        "alt"
      | 
        ## forme abrégée du titre.
        "short"
      | 
        ##  (description paraphrastique de
        ##                             l’ouvrage.) texte qui paraphrase l'oeuvre.
        "desc"
      | xsd:Name
    }?,
    empty
  }
docAuthor =
  
  ##  (auteur du document) contient le nom de l’auteur du document tel qu’il
  ##             est donné sur la page de titre (ce nom est le plus souvent contenu dans une mention de
  ##            responsabilité) .
  element ns1:docAuthor {
    macro.phraseSeq,
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
imprimatur =
  
  ## contient une mention formalisée autorisant la publication
  ##     d’un ouvrage, parfois exigée sur une page de titre ou à son verso.
  element ns1:imprimatur {
    macro.paraContent, att.global.attributes, empty
  }
docEdition =
  
  ##  (édition du document) contient une mention d’édition telle qu’elle
  ##             figure sur la page de titre d’un document.
  element ns1:docEdition {
    macro.paraContent, att.global.attributes, empty
  }
docImprint =
  
  ##  (mention d'impression) contient la mention d'impression 
  ##             de l'éditeur (lieu et date de publication, nom de l’éditeur), telle qu’elle est
  ##             généralement donnée au bas de la page de titre.
  element ns1:docImprint {
    (text
     | model.gLike
     | model.phrase
     | pubPlace
     | docDate
     | publisher
     | model.global)*,
    att.global.attributes,
    empty
  }
docDate =
  
  ##  (date du document) contient la date d’un document telle qu’elle est
  ##             (généralement ) donnée sur une page de titre. 
  element ns1:docDate {
    macro.phraseSeq,
    att.global.attributes,
    
    ## donne la date dans une forme standard,
    ## c'est-à-dire. YYYY-MM-DD.
    attribute when { data.temporal.w3c }?,
    empty
  }
front =
  
  ##  (texte préliminaire) contient tout ce qui est au début du document,
  ##             avant le corps du texte : en-têtes, page de titre, préfaces, dédicaces, etc.
  element ns1:front {
    ((model.frontPart | model.pLike.front | model.global)*,
     ((model.div1Like,
       (model.frontPart | model.div1Like | model.global)*)
      | (model.divLike,
         (model.frontPart | model.divLike | model.global)*))?,
     (model.divBottomPart, (model.divBottomPart | model.global)*)?),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
back =
  
  ##  (texte postliminaire) contient tout supplément placé après la partie principale
  ##     d'un texte : appendice, etc.
  element ns1:back {
    ((model.frontPart | model.pLike.front | model.global)*,
     ((model.div1Like,
       (model.frontPart | model.div1Like | model.global)*)
      | (model.divLike,
         (model.frontPart | model.divLike | model.global)*))?,
     (model.divBottomPart, (model.divBottomPart | model.global)*)?),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
facsimile =
  
  ## contient une représentation d'une source écrite
  ## quelconque sous la forme d'un ensemble d'images plutôt que sous la forme d'un texte transcrit
  ## ou encodé.
  element ns1:facsimile {
    (front?, (model.graphicLike | surface)+, back?),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
att.global.facs.attributes = att.global.facs.attribute.facs
att.global.facs.attribute.facs =
  
  ##  (fac-similé) pointe directement vers une image ou vers une partie
  ##         d'une image correspondant au contenu de l'élément.
  attribute facs {
    list { data.pointer, data.pointer* }
  }?
surface =
  
  ## définit une surface écrite comme un rectangle décrit par ses coordonnées spatiales, en regroupant éventuellement une ou plusieurs représentations
  ## graphiques de cet espace et des zones rectangulaires intéressantes à l'intérieur de
  ## celui-ci.
  element ns1:surface {
    (model.glossLike*, model.graphicLike*, zone*),
    att.global.attributes,
    att.coordinated.attributes,
    att.declaring.attributes,
    empty
  }
att.coordinated.attributes =
  att.coordinated.attribute.start,
  att.coordinated.attribute.ulx,
  att.coordinated.attribute.uly,
  att.coordinated.attribute.lrx,
  att.coordinated.attribute.lry,
  att.coordinated.attribute.points
att.coordinated.attribute.start =
  
  ## désigne l'élément qui, dans la transcription du texte, contient au moins le début de la section de texte représentée dans la zone ou surface.
  attribute start { data.pointer }?
att.coordinated.attribute.ulx =
  
  ## donne la valeur x de l'abscisse du
  ##         coin supérieur gauche d'un rectangle.
  attribute ulx { data.numeric }?
att.coordinated.attribute.uly =
  
  ## donne la valeur y de l'ordonnée du coin supérieur gauche d'un rectangle.
  attribute uly { data.numeric }?
att.coordinated.attribute.lrx =
  
  ## donne la valeur x de l'abscisse du coin inférieur droit d'un rectangle.
  attribute lrx { data.numeric }?
att.coordinated.attribute.lry =
  
  ## donne la valeur y de l'ordonnée du coin inférieur droit d'un rectangle.
  attribute lry { data.numeric }?
att.coordinated.attribute.points =
  
  ## identifies a non-rectangular area within the bounding box
  ## specified by the other attributes  by specifying
  ## a series of pairs of numbers, each of which gives the x,y coordinates
  ## of a point on a line defining the non-rectangular area.
  attribute points {
    list { data.point, data.point, data.point, data.point* }
  }?
zone =
  
  ## définit une zone rectangulaire contenue dans un élément surface.
  element ns1:zone {
    (model.glossLike*, model.graphicLike*),
    att.global.attributes,
    att.coordinated.attributes,
    empty
  }
addSpan =
  
  ##  (partie de texte ajoutée) marque le début d'une longue partie de texte ajoutée par un auteur, un copiste, un annotateur ou
  ##   un correcteur (voir aussi add).
  element ns1:addSpan {
    empty
    >> sch:pattern [
         id = "addSpan-constraint-spanTo"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:addSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "The spanTo= attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "addSpan-constraint-spanTo_fr"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:addSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.transcriptional.attributes,
    att.placement.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    empty
  }
damage =
  
  ##  (dommage) sert à encoder une zone qui a subi des dommages dans le manuscrit témoin du texte.
  element ns1:damage {
    macro.paraContent,
    att.global.attributes,
    att.typed.attributes,
    att.damaged.attributes,
    empty
  }
damageSpan =
  
  ##  (partie de texte endommagée) marque le début d'une longue partie de texte,
  ## endommagée d'une manière quelconque mais toujours lisible.
  element ns1:damageSpan {
    empty
    >> sch:pattern [
         id = "damageSpan-constraint-spanTo"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:damageSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "The spanTo= attribute of\x{a}" ~
             "	"
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "damageSpan-constraint-spanTo_fr"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:damageSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.damaged.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    empty
  }
delSpan =
  
  ##  (partie de texte supprimée) marque le début d'une longue partie de texte supprimée, signalée comme supprimée ou bien signalée comme superflue ou fausse par un auteur, un copiste, un annotateur ou un correcteur.
  element ns1:delSpan {
    empty
    >> sch:pattern [
         id = "delSpan-constraint-spanTo"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:delSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "The spanTo= attribute of "
             sch:name [ ]
             "\x{a}" ~
             "      is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "delSpan-constraint-spanTo_fr"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:delSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    empty
  }
ex =
  
  ##  (développement éditorial) contient une succession de lettres ajoutées par un éditeur ou un transcripteur pour développer une abréviation.
  element ns1:ex {
    macro.xtext, att.global.attributes, att.editLike.attributes, empty
  }
fw =
  
  ##  (élément de mise en page) permet d'encoder un titre courant (en haut ou en bas de la page), une réclame ou une autre information comparable, qui apparaît sur la page courante.
  element ns1:fw {
    macro.phraseSeq,
    att.global.attributes,
    att.placement.attributes,
    
    ## caractérise l'information encodée conformément à une typologie appropriée.
    ## Exemple de valeurs possibles: 1] header; 2] footer; 3] pageNum (numéro de page) ; 4] lineNum (numéro de ligne) ; 5] sig(signature) ; 6] catch (réclame) 
    attribute type { data.enumerated }?,
    empty
  }
gb =
  
  ##  (gathering begins) marks the point in a transcribed codex at which a new
  ##   gathering or quire begins.
  element ns1:gb {
    empty,
    att.global.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
handNotes =
  
  ## contient un ou plusieurs éléments handNote qui documentent les différentes mains identifiées dans les textes source.
  element ns1:handNotes { handNote+, att.global.attributes, empty }
handShift =
  
  ##  (reprise de main) marque le début d'une section du texte écrite par une nouvelle main ou le début d'une nouvelle séance d'écriture.
  element ns1:handShift {
    empty,
    att.global.attributes,
    att.handFeatures.attributes,
    att.responsibility.attributes,
    
    ## donne l'identifiant de la nouvelle main.
    attribute new { data.pointer }?,
    empty
  }
am =
  
  ##  (marqueur d'abréviation) contient une succession de lettres ou de signes
  ## présents dans une abréviation mais omis ou remplacés dans la forme développée de
  ## l'abréviation
  element ns1:am {
    (text | model.gLike | model.pPart.transcriptional)*,
    att.global.attributes,
    att.editLike.attributes,
    empty
  }
restore =
  
  ##  (rétablissement) indique le rétablissement d'un état antérieur du texte par suppression d'une marque ou d'une instruction de l'éditeur ou de l'auteur.
  element ns1:restore {
    macro.paraContent,
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    empty
  }
space =
  
  ##  (espace) permet de situer un espace significatif dans le texte édité.
  element ns1:space {
    model.glossLike*,
    att.global.attributes,
    att.dimensions.attributes,
    
    ##  (dimension) indique si l'espace est vertical ou horizontal.
    attribute dim {
      
      ## l'espace est horizontal.
      "horizontal"
      | 
        ##  l'espace est vertical.
        "vertical"
    }?,
    
    ##  (responsable) désigne la personne qui a identifié et mesuré l'espace.
    attribute resp { data.pointer }?,
    empty
  }
subst =
  
  ##  ( substitution) regroupe une ou plusieurs parties de texte supprimées et une ou plusieurs parties de texte ajoutées, lorsque cette combinaison peut être considérée comme une intervention unique sur le texte.
  element ns1:subst {
    (model.pPart.transcriptional, model.pPart.transcriptional+),
    att.global.attributes,
    att.transcriptional.attributes,
    empty
  }
supplied =
  
  ##  (texte restitué) permet d'encoder du texte restitué par l'auteur de la transcription ou par l'éditeur pour une raison quelconque, le plus souvent parce que le texte du document original ne peut être lu, par suite de dommages matériels ou de lacunes.
  element ns1:supplied {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    
    ## donne la raison pour laquelle on a dû restituer le texte.
    attribute reason {
      list { data.word, data.word* }
    }?,
    empty
  }
surplus =
  
  ##  (Texte superflu) permet d'encoder une partie de texte présente dans la source lorsque l'éditeur la considère superflue ou redondante.
  element ns1:surplus {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    
    ## indique les raisons pour lesquelles on considère cette partie de texte comme superflue.
    attribute reason {
      list { data.word, data.word* }
    }?,
    empty
  }
metDecl =
  
  ##  (déclaration sur la métrique)  documente la notation utilisée pour noter un modèle
  ##     métrique lorsque celui-ci est spécifié comme la valeur des attributs met ,
  ##     real, ou rhyme, qui s’appliquent à tout élément de la structure d’un texte
  ##     versifié (par exemple lg, l, ou seg). 
  element ns1:metDecl {
    ((model.pLike | model.noteLike)+ | metSym+),
    att.global.attributes,
    att.declarable.attributes,
    
    ## indique si la notation traduit la forme métrique
    ##         abstraite, sa réalisation prosodique, le schéma des rimes, ou une combinaison de ces
    ##         différents éléments.
    [ a:defaultValue = "met real" ]
    attribute type {
      list {
        (
         ##  (attribut met
         ##                ) la déclaration s'applique à la structure métrique
         ##             abstraite notée par l'attribut met.
         "met"
         | 
           ##  (attribut real
           ##                ) la déclaration s'applique à la réalisation réelle
           ##             de la structure métrique conventionnelle notée par l'attribut real .
           "real"
         | 
           ##  (attribut rime) la déclaration s'applique à la structure métrique
           ##             abstraite notée par l'attribut
           ##               rhyme.
           "rhyme"),
        (
         ##  (attribut met
         ##                ) la déclaration s'applique à la structure métrique
         ##             abstraite notée par l'attribut met.
         "met"
         | 
           ##  (attribut real
           ##                ) la déclaration s'applique à la réalisation réelle
           ##             de la structure métrique conventionnelle notée par l'attribut real .
           "real"
         | 
           ##  (attribut rime) la déclaration s'applique à la structure métrique
           ##             abstraite notée par l'attribut
           ##               rhyme.
           "rhyme")?,
        (
         ##  (attribut met
         ##                ) la déclaration s'applique à la structure métrique
         ##             abstraite notée par l'attribut met.
         "met"
         | 
           ##  (attribut real
           ##                ) la déclaration s'applique à la réalisation réelle
           ##             de la structure métrique conventionnelle notée par l'attribut real .
           "real"
         | 
           ##  (attribut rime) la déclaration s'applique à la structure métrique
           ##             abstraite notée par l'attribut
           ##               rhyme.
           "rhyme")?
      }
    }?,
    
    ##  (modèle d'expression régulière) indique une expression régulière définissant toute
    ##         valeur permise dans cette notation.
    attribute pattern { data.pattern }?,
    empty
  }
metSym =
  
  ##  (Symbole de notation métrique.) documente le sens propre à un caractère particulier ou à
  ##     une suite de caractères dans une notation métrique, exprimés soit explicitement, soit dans les
  ##     termes d’autres éléments inclus dans le même élément metDecl. 
  element ns1:metSym {
    macro.phraseSeq.limited,
    att.global.attributes,
    
    ## indique le caractère ou l'ordre des caractères
    ##         documentés.
    attribute value {
      list { data.word, data.word* }
    },
    
    ## indique si le symbole est défini à l’aide d’autres
    ##         symboles, (l'attribut terminal a pour valeur false), ou rédigé en
    ##         texte libre, (l'attribut terminal a pour valeur true). 
    [ a:defaultValue = "true" ] attribute terminal { data.truthValue }?,
    empty
  }
att.metrical.attributes =
  att.metrical.attribute.met,
  att.metrical.attribute.real,
  att.metrical.attribute.rhyme
att.metrical.attribute.met =
  
  ##  (structure métrique, canonique) contient un encodage spécifié par l'utilisateur pour la structure métrique conventionnelle de l'élément.
  attribute met { xsd:token }?
att.metrical.attribute.real =
  
  ##  (structure métrique réelle) contient un encodage, spécifié par l'utilisateur, de la réalisation effective de la structure métrique conventionnelle applicable à l'élément.
  attribute real { xsd:token }?
att.metrical.attribute.rhyme =
  
  ##  (schéma rimique) spécifie quel schéma de rimes a été appliqué à un
  ##           groupe de lignes versifiées.
  attribute rhyme { xsd:token }?
att.enjamb.attributes = att.enjamb.attribute.enjamb
att.enjamb.attribute.enjamb =
  
  ##  ( enjambement) indique que la fin d'un vers est marqué par un enjambement.
  ## Exemple de valeurs possibles: 1] no; 2] yes; 3] weak; 4] strong
  attribute enjamb { data.enumerated }?
caesura =
  
  ## signale une coupe rythmique à l'intérieur d'un vers.
  element ns1:caesura { empty, att.global.attributes, empty }
rhyme =
  
  ## Marque la partie rimante d'une ligne métrique.
  element ns1:rhyme {
    macro.paraContent,
    att.global.attributes,
    att.typed.attributes,
    
    ## Donne une étiquette pour identifier à quelle shéma
    ##         métrique correspond cette alternance de rimes.
    attribute label { data.word }?,
    empty
  }
start = TEI | teiCorpus
